#+TITLE: myinit.org
#+AUTHOR: Mario Rom√°n

* My Emacs configuration file
This is my Emacs init file, written in org-mode using literate programming.
I have taken ideas for my configuration mainly from:

 - [[http://cestlaz.github.io/][C'est la Z]]
 - [[https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org][Harry R. Schwartz's configuration file]]

It works on Emacs 25.1.

** Basic
Disable the toolbar and menubar

#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
(tooltip-mode -1)
#+END_SRC

** Files
Quick access to the most important files:

#+BEGIN_SRC emacs-lisp
  (setq m42/wiki-file "~/Dropbox/orgzly/wiki.org")
  (setq m42/math-file "~/projects/math/notes.org")
  (setq m42/links-file "~/Dropbox/orgzly/links.org")
  (setq m42/init-file "~/.emacs.d/myinit.org")
  (setq m42/agenda-file "~/Dropbox/orgzly/tasks.org")

  (global-set-key (kbd "<f5>") (lambda() (interactive) (find-file m42/wiki-file)))
  (global-set-key (kbd "<f6>") (lambda() (interactive) (find-file m42/math-file)))
  (global-set-key (kbd "<f7>") (lambda() (interactive) (find-file m42/links-file)))
  (global-set-key (kbd "<f8>") (lambda() (interactive) (find-file m42/init-file)))
  (global-set-key (kbd "<f9>") (lambda() (interactive) (find-file m42/agenda-file)))
#+END_SRC

** Startup
Inhibits the startup screen and loads an initial buffer:

#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-screen t)
(setq initial-buffer-choice m42/wiki-file)
#+END_SRC

** Word wrapping
#+BEGIN_SRC emacs-lisp
(setq-default word-wrap 1)
#+END_SRC

** Shell
Starts shell using =C-c s=.

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c s") 'eshell)
#+END_SRC

** Theme
#+BEGIN_SRC emacs-lisp
(use-package zenburn-theme
  :ensure t)
#+END_SRC

* Languages
** Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t)
#+END_SRC

** Haskell
Allows interactive Haskell evaluation in Emacs.

#+BEGIN_SRC emacs-lisp
  (use-package haskell-mode
    :ensure t)
  (require 'haskell-interactive-mode)
  (require 'haskell-process)
  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)

  ;; (add-hook 'haskell-mode-hook 'intero-mode)
#+END_SRC

** R
Emacs Speaks Statistics.

#+BEGIN_SRC emacs-lisp
(use-package ess
  :ensure t)

(require 'ess-site)
#+END_SRC

** Python
Elpy support.

#+BEGIN_SRC emacs-lisp
(use-package elpy
  :ensure t)
(elpy-enable)
(elpy-use-ipython)
(setq elpy-rpc-python-command "python2")
#+END_SRC

*** Jupyter notebook
#+BEGIN_SRC emacs-lisp
(use-package ein
  :ensure t)
#+END_SRC

** TODO Proof General
Loads the Proof General file.

#+BEGIN_SRC emacs-lisp
; (load-file "/usr/share/emacs/site-lisp/ProofGeneral/generic/proof-site.el")
#+END_SRC

** Agda
Agda-mode configuration:

#+BEGIN_SRC emacs-lisp
(load-file (let ((coding-system-for-read 'utf-8))
                (shell-command-to-string "agda-mode locate")))
#+END_SRC

** Sage
*** sage-mode
    #+BEGIN_SRC emacs-lisp
      (use-package sage-shell-mode
        :ensure t)

      (setq sage-shell:use-prompt-toolkit t)
    #+END_SRC

** Lisp
Evaluates Lisp in place with `C-c e`. Taken from [[http://emacsredux.com/blog/2013/06/21/eval-and-replace/][Emacs Redux]].

#+BEGIN_SRC emacs-lisp
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))
  (global-set-key (kbd "C-c e") 'eval-and-replace)
#+END_SRC

** HAML
HAML support.

#+BEGIN_SRC emacs-lisp
  (use-package haml-mode
    :ensure t)

  (add-hook 'haml-mode-hook
            (lambda ()
              (setq indent-tabs-mode nil)
              (define-key haml-mode-map "\C-m" 'newline-and-indent)))
#+END_SRC

* Completion
Taken from [[https://github.com/malb/emacs.d/blob/master/malb.org#latex][malb's emacs.d]].

#+BEGIN_SRC emacs-lisp
  ;; (use-package company
  ;;   :ensure t
  ;;   :config (progn
  ;; 	    (global-company-mode 1)))
#+END_SRC

I am no longer using company-auctex.

#+BEGIN_SRC emacs-lisp
  ;; (use-package company-auctex
  ;;   :ensure t
  ;;   :config (progn
  ;;             (defun company-auctex-labels (command &optional arg &rest ignored)
  ;; 	      "company-auctex-labels backend"
  ;; 	      (interactive (list 'interactive))
  ;; 	      (case command
  ;;                 (interactive (company-begin-backend 'company-auctex-labels))
  ;;                 (prefix (company-auctex-prefix "\\\\.*ref{\\([^}]*\\)\\="))
  ;;                 (candidates (company-auctex-label-candidates arg))))

  ;;             (add-to-list 'company-backends
  ;;                          '(company-auctex-macros
  ;;                            company-auctex-environments))

  ;;             (add-to-list 'company-backends #'company-auctex-labels)
  ;;             (add-to-list 'company-backends #'company-auctex-bibs)))
#+END_SRC

* Org-mode
** Org-plus-contrib
#+BEGIN_SRC emacs-lisp
(use-package org-plus-contrib
  :ensure t)
#+END_SRC

** Directories
Stores org files in =~/org=. Defines location of index, agenda and todo files.

#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/org")
  (setq org-agenda-files (list m42/agenda-file))
  (setq org-archive-location "~/org/archive.org ::* From %s")
#+END_SRC

** Keybindings
*** Agenda and capture
Basic keybindings for org-mode.

#+BEGIN_SRC emacs-lisp
  (setq org-export-coding-system 'utf-8)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cc" 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC

*** Navigation
Navigation between headings:

#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 
            (lambda ()
              (local-set-key "\M-n" 'outline-next-visible-heading)
              (local-set-key "\M-p" 'outline-previous-visible-heading)))
#+END_SRC

** Customization of org-mode
Sets attributes for the standard org-mode faces.
   
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))

  (set-face-attribute 'org-level-1 nil
    :inherit 'outline-1
    :foreground "LightGoldenrod1"
    :weight 'bold
    :height 1.05)

  (set-face-attribute 'org-level-2 nil
    :inherit 'outline-1
    :weight 'semi-bold
    :height 1.0)

  (set-face-attribute 'org-level-3 nil 
    :inherit 'outline-3 
    :weight 'bold)

  (set-face-attribute 'org-level-4 nil
    :inherit 'outline-3 
    :foreground "light steel blue" 
    :weight 'normal)

  (set-face-attribute 'org-level-5 nil
    :inherit 'outline-4 
    :foreground "thistle" 
    :weight 'normal)

  (set-face-attribute 'org-level-6 nil
    :inherit 'outline-4)

  (set-face-attribute 'org-level-8 nil
    :inherit 'outline-7)

  (set-face-attribute 'org-link nil
    :inherit 'link
    :foreground "SlateGray1"
    :underline nil)
#+END_SRC

#+RESULTS:

** Org-export
*** Beamer
Exports to beamer. Defines the beamer class.

#+BEGIN_SRC emacs-lisp
  (require 'ox-latex)
  (add-to-list 'org-latex-classes
               '("beamer"
                 "\\documentclass\[presentation\]\{beamer\}"
                 ("\\section\{%s\}" . "\\section*\{%s\}")
                 ("\\subsection\{%s\}" . "\\subsection*\{%s\}")
                 ("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
#+END_SRC

*** Reveal.js
The configuration allowing me to do *Reveal.js* presentations using org-mode.
This was taken from [[http://cestlaz.github.io/posts/using-emacs-11-reveal][C'est la Z]].

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure ox-reveal)

  (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  (setq org-reveal-mathjax t)

  (use-package htmlize
    :ensure t)
#+END_SRC

** Org-babel
Loads =org-babel= languages.

#+BEGIN_SRC emacs-lisp
(use-package ob-sagemath
  :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (require 'ob-C)
  (org-babel-do-load-languages
   'org-babel-load-languages
    '( (ruby . t)
       (haskell . t)
       (C . t)
       (emacs-lisp . t)
       (ditaa . t)
       ;(R . t)
       (sagemath . t)
     ))
#+END_SRC

*** Sage
Org-babel-sage configuration:

#+BEGIN_SRC emacs-lisp
  ;; Ob-sagemath supports only evaluating with a session.
  (setq org-babel-default-header-args:sage '((:session . t)
                                             (:results . "output")))

  ;; C-c c for asynchronous evaluating (only for SageMath code blocks).
  (with-eval-after-load "org"
    (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))

  ;; Do not confirm before evaluation
  (setq org-confirm-babel-evaluate nil)

  ;; Do not evaluate code blocks when exporting.
  (setq org-export-babel-evaluate nil)

  ;; Show images when opening a file.
  (setq org-startup-with-inline-images t)

  ;; Show images after evaluating code blocks.
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+END_SRC

*** Haskell
    Uses =runhaskell= when it outputs the results. Taken from
    a great [[http://quickhack.net/nom/blog/2012-08-31-org-babel-and-haskell.html][article]] (in Japanese!) by Yoshinari Nomura.

    #+BEGIN_SRC emacs-lisp
      (defadvice org-babel-haskell-initiate-session
        (around org-babel-haskell-initiate-session-advice)
        (let* ((buff (get-buffer "*haskell*"))
               (proc (if buff (get-buffer-process buff)))
               (type (cdr (assoc :result-type 'params)))
               (haskell-program-name
                (if (equal type 'output) "runhaskell-ob" "ghci")))
          (if proc (kill-process proc))
          (sit-for 0)
          (if buff (kill-buffer buff))
          ad-do-it))

      (ad-activate 'org-babel-haskell-initiate-session)
    #+END_SRC

*** Ditaa
Path to Ditaa
#+BEGIN_SRC emacs-lisp
  (setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0_9.jar")
#+END_SRC

** Org-capture
#+BEGIN_SRC emacs-lisp
  (setq org-capture-templates
	(quote (
		("x" "org-protocol" entry (file+headline m42/links-file "Inbox")
		 "** %c %^g" :kill-buffer t :prepend t)
		("i" "idea" entry (file+olp "~/projects/wiki/wiki.org" "Ideas" "F√°ciles")
		 "*** %?\n%U\n" :kill-buffer t :prepend t)
	       )))
#+END_SRC

** Tasks & To-read
Following the advice of [[https://rafaelleru.github.io/2017/01/22/to_read_list_emacs/][@rafaelleru]].

#+BEGIN_SRC emacs-lisp
  (defun m42/export-html-if-agenda()
    "Auto exports an html file"
    (when (equal buffer-file-name "/home/mario/Dropbox/orgzly/tasks.org")
      (org-twbs-export-to-html)))

  (add-hook 'after-save-hook 'm42/export-html-if-agenda)
#+END_SRC

** Latex
Uses =C-√±= to preview formulas:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-√±") 'org-toggle-latex-fragment)
#+END_SRC

*** Latex math mode abbreviations
Abbreviations on =latex-math-mode=.

#+BEGIN_SRC emacs-lisp
  (setq LaTeX-math-abbrev-prefix "√ß")
  (setq LaTeX-math-list
    (quote
      ((";" "mathbb{" "" nil)
       ("=" "cong" "" nil)
       ("<right>" "longrightarrow" "" nil)
       ("<left>" "longleftarrow" "" nil)
       ("C-<right>" "Longrightarrow" "" nil)
       ("C-<left>" "Longleftarrow" "" nil)
       ("^" "widehat" "" nil)
       ("~" "widetilde" "" nil)
       ("'" "\partial" "" nil)
       ("0" "varnothing" "" nil)
       ("C-(" "left(" "" nil)
       ("C-)" "right)" "" nil)
       )))
#+END_SRC

*** Latex math mode
Requires Latex to use =latex-math-mode=. It is activated by default.

#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex)
  (require 'latex)

  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'org-mode-hook 'LaTeX-math-mode)
#+END_SRC

*** Conmutative diagrams
Conmutative diagrams with the =tikz-cd= package.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-latex-packages-alist '("" "tikz" t))
  (eval-after-load "preview"
    '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))
  (setq org-latex-create-formula-image-program 'imagemagick)
#+END_SRC

*** Zooming
Zooms latex image previews along with the text using =C-x C-+=.

#+BEGIN_SRC emacs-lisp
  (defun update-org-latex-fragment-scale ()
    (let ((text-scale-factor (expt text-scale-mode-step text-scale-mode-amount)))
      (plist-put org-format-latex-options :scale (* 1.2 text-scale-factor)))
  )
  (add-hook 'text-scale-mode-hook 'update-org-latex-fragment-scale)
#+END_SRC

** org-pinta
Creates an image using =imagemagick= and opens
a =pinta= window to edit it.

# It should be generalized to an editor-agnostic function,
# not using pinta, but the given editor.

#+BEGIN_SRC emacs-lisp
  (setq pinta-dir "./images/")
  (setq pinta-dimension "300x300")

  (defun org-pinta (filename)
    "Creates an image using pinta"
    (interactive "sImage name: ")

    (let ((file (concat pinta-dir "/" filename ".png")))
      ; creates the image, opens pinta
      (shell-command (concat "mkdir -p $(dirname " file ") && touch " file))
      (shell-command (concat "convert -size " pinta-dimension " xc:white png24:" file))
      (shell-command (concat "pinta " file))

      ; inserts the image in the current buffer
      (insert "#+begin_center")
      (newline)
      (insert "#+attr_latex: :width 50px")
      (newline)
      (insert (concat "[[" file "]]"))
      (newline)
      (insert "#+end_center")
    )
  )
#+END_SRC

#+begin_center
#+attr_latex: :width 50px
[[./pinta//painting.png]]
#+end_center

* Snippets
** Yasnippet support.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :init (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
    :config (yas-global-mode 1)
    :bind (("<C-dead-grave>" . yas-insert-snippet))
    )
#+END_SRC

** Snippets for programming languages
#+BEGIN_SRC emacs-lisp
  (use-package haskell-snippets
    :ensure t)
#+END_SRC
* Customization
** Custom file
Loads the customize file, follows this [[http://emacsblog.org/2008/12/06/quick-tip-detaching-the-custom-file/][article]]:

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)
#+END_SRC

** What face?
Indicates what face are we using currently under the cursor.

#+BEGIN_SRC emacs-lisp
  (defun what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
                    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+END_SRC

* Blog
** org-page
#+BEGIN_SRC emacs-lisp
  (use-package org-page
    :ensure t)
  (setq op/repository-directory "~/projects/m42.github.io/")
  (setq op/site-domain "http://m42.github.io/")
#+END_SRC

Personal configuration.

#+BEGIN_SRC emacs-lisp
(setq op/site-domain "http://m42.github.io/")
(setq op/site-main-title "Mario Rom√°n")
(setq op/site-sub-title "M42 - mromang08@gmail.com")
(setq op/personal-github-link "https://github.com/m42")
#+END_SRC

Sections of the blog

#+BEGIN_SRC emacs-lisp
(setq op/category-config-alist
   '(("blog" 
      :show-meta t 
      :show-comment nil 
      :uri-generator op/generate-uri 
      :uri-template "/blog/%y/%m/%d/%t/" 
      :sort-by :date 
      :category-index t)
     ("index"
      :show-meta nil 
      :show-comment nil 
      :uri-generator op/generate-uri 
      :uri-template "/" 
      :sort-by :date 
      :category-index nil)
     ("about"
      :show-meta nil 
      :show-comment nil 
      :uri-generator op/generate-uri 
      :uri-template "/about/" 
      :sort-by :date 
      :category-index nil)))
#+END_SRC

* Other packages
** Auctex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex)
#+END_SRC
** Magit
Opens *magit* with =C-c g=.

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status)
    )
#+END_SRC

** dict-replace
My dict-replace package. I am no longer using it.

#+BEGIN_SRC emacs-lisp
  ;(load-file "~/.emacs.d/dict-replace.el")
  ;(global-set-key (kbd "<f5>") 'dict-translate)
#+END_SRC

** Flycheck
Flycheck checks the syntax of programming languages.

#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
#+END_SRC

** Engine-mode
[[https://github.com/hrs/engine-mode][Engine mode]] allows us to use a search engine directly on Emacs. It binds the different 
search engines to =C-c / x=, where =x= is a char representing the engine.

#+BEGIN_SRC emacs-lisp
(use-package engine-mode
  :ensure t)

(defengine duckduckgo
  "https://duckduckgo.com/?q=%s"
  :keybinding "d")
(defengine github
  "https://github.com/search?ref=simplesearch&q=%s"
  :keybinding "g")
(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s")
(defengine rfcs
  "http://pretty-rfc.herokuapp.com/search?q=%s")
(defengine stack-overflow
  "https://stackoverflow.com/search?q=%s"
  :keybinding "s")
(defengine wikipedia
  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
  :keybinding "w")
(defengine wiktionary
  "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

(engine-mode t)
#+END_SRC
