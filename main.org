#+Title: Cosmoi Emacs
#+Author: Mario Román
#+Email: mromang08@gmail.com
#+TODO: WIP | DONE

This is my Emacs init file, written in org-mode using literate
programming and =org-babel= blocks. The =init.el= file tangles the Elisp
code blocks of this file into =config.el=. I have taken ideas for my
configuration mainly from

  * [[http://cestlaz.github.io/][C'est la Z]]
  * [[https://github.com/hrs/dotfiles/blob/master/emacs.d/configuration.org][Harry R. Schwartz's configuration file]]

and from many other configuration files and blogs such as

  * [[http://emacsredux.com/][Emacs Redux]]
  * [[http://irreal.org/blog/][Irreal]]
  * [[https://oremacs.com][(or emacs irrelevant)]]
  * [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua's configuration file]]
  * [[http://karl-voit.at/2017/06/03/emacs-org/][Karl Voit's configuration file]]
  * [[http://spacemacs.org/][Spacemacs]]

It /works for me/ on Emacs 26.3 and org-version 9.3.6. You can check
your Emacs version with =M-x version= and your org-mode version with
=M-x org-version=.

* Basic
#+BEGIN_SRC emacs-lisp
  (message "[init] Basic configuration")

  ;; User information is used by Emacs in frame titles and email.
  ;; https://www.gnu.org/software/emacs/manual/html_node/elisp/User-Identification.html
  ;; It is also used by Gnus.
  (setq user-full-name "Mario Román")
  (setq user-mail-address "mromang08@gmail.com")

  ;; Sensitive information is stored into a different file which I do not
  ;; upload to GitHub. It sets some variables.
  (load "~/.emacs.d/emacs.secrets" t)

  ;; A list of the most important files on my workflow. Those variables are
  ;; used all across the configuration file; and listing them here eases
  ;; the process of rewriting directory paths.
  (setq m42/math-file       (expand-file-name "~/org/Math.org"))
  (setq cosmoi/init-file    (expand-file-name "~/.emacs.d/main.org"))
  (setq m42/agenda-file     (expand-file-name "~/org/agenda/Tasks.org"))
  (setq m42/journal-file    (expand-file-name "~/org/Journal.org"))
  (setq m42/archive-file    (expand-file-name "~/org/Archive.org"))
  (setq m42/org-folder      (expand-file-name "~/org"))

  ;; Jumps to the important files with a single keystroke.
  (global-set-key (kbd "<f8>") (lambda() (interactive) (find-file cosmoi/init-file)))
  
  ;; I prefer to use a separate custom file for Emacs. This means any configurations
  ;; that are created using the Customize menu and the list of installed packages will
  ;; be kept separate of this org configuration.
  ;; http://emacsblog.org/2008/12/06/quick-tip-detaching-the-custom-file/
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file 'noerror)

  ;; Inhibits the startup screen and loads an initial buffer.
  (setq inhibit-startup-screen t)
  (setq initial-buffer-choice m42/agenda-file)

  ;; Disables toolbar and menubar
  ;(tool-bar-mode -1)
  ;(menu-bar-mode -1)
  ;(scroll-bar-mode -1)
  (tooltip-mode -1)

  ;; Includes the local bin on the 'exec-path'. This allows Emacs to find
  ;; executables in the local binaries folder.
  (setq exec-path (cons "/home/mario/.local/bin" exec-path))

  ;; The configuration files can be reloaded at any time using
  ;; =M-insert=.  This eases the process of writing, debugging and
  ;; testing the configuration file. Current set variables will not be
  ;; removed; and Emacs will need a complete restart to clean them.
  (global-set-key [M-insert] '(lambda() (interactive) (load-file "~/.emacs.d/init.el")))

  ;; Restart-emacs is a package to restart Emacs from within Emacs. It
  ;; offers the command =restart-emacs=, which kills the current Emacs
  ;; session and starts a new session.
  ;; https://github.com/iqbalansari/restart-emacs
  (use-package restart-emacs :ensure t)

  ;; Better defaults for Emacs.
  (use-package better-defaults :ensure t)

  ;; Disable warnings when opening large files.
  (setq large-file-warning-threshold nil)

  ;; Disables backup files.
  (setq make-backup-files nil)

  ;; The cursor should not blink
  (setq blink-cursor-mode nil)

  ;; Autorrevert packages automatically.
  (global-auto-revert-mode 1)

  ;; Yes-no questions are unnecessarily long.  It is preferable to
  ;; simply use y or n.
  (fset 'yes-or-no-p 'y-or-n-p)

  ;; Word-wrapping.
  (setq-default word-wrap 1)
  (delete-selection-mode 1)
#+END_SRC

* Utilities
#+BEGIN_SRC emacs-lisp
  ;; Edit with multiple cursors at the same time.
  (use-package multiple-cursors
    :ensure t
    :bind (("C-S-c C-S-c" . mc/edit-lines)
	   ("C->" . mc/mark-next-like-this)))

  ;; A better regexp search.
  (use-package visual-regexp
    :bind (
      ("C-c C-r" . vr/replace)
      ("C-c q" . vr/query-replace)
      ("C-c m" . vr/mc-mark)
      ))

  ;; Indicates what face are we using currently under the cursor.
  (defun what-face (pos)
    (interactive "d")
    (let ((face (or (get-char-property (point) 'read-face-name)
		    (get-char-property (point) 'face))))
      (if face (message "Face: %s" face) (message "No face at %d" pos))))

  ;; A better help
  (use-package helpful
    :ensure t)

  ;; Study key frequency
  ;; (use-package keyfreq
  ;;   :init 
  ;;     (keyfreq-mode 1)
  ;;     (keyfreq-autosave-mode 1))

  ;; Helps discoverability by showing you the available commands at any time.
  (use-package which-key
    :ensure t
    :config 
      (which-key-mode)
      (setq which-key-idle-delay 0.4))

  ;; Smex provides an enhancement to the =M-x= command. Uses =ido= for
  ;; autocompletion and provides a convenient interface to the most
  ;; frequently used commands.
  ;; https://www.emacswiki.org/emacs/Smex
  (use-package smex
    :ensure t
    :config (smex-initialize)
    :bind (("M-x" . smex)))

  ;; Smartparens tries to be smart about parens.
  ;; https://github.com/Fuco1/smartparens
  (use-package smartparens :ensure t)

  ;; Electric parens.
  (electric-pair-mode 1)

  ;; Flycheck checks the syntax of programming languages.
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

  ;; Multiple modes at the same time with polymode.
  (use-package polymode :ensure t)

  ;; Magit is an interface to the version control system Git. The main
  ;; function is 'magit-status', which shows the status of the files on
  ;; the current repository. 
  ;;  https://magit.vc/
  ;;  https://git-scm.com/
  (use-package magit
    :ensure t
    :bind ("C-c g" . magit-status))

  ;; Magit-todo's.
  (use-package magit-todos
    :ensure t
    :config (magit-todos-mode))

  ;; Projectile manages projects and allows us to jump between files of
  ;; the same project.
  (use-package projectile
    :ensure t
    :config
      (projectile-global-mode)
      (setq projectile-completion-system 'ivy))

  ;; Unfill paragraph takes a paragraph separated by newlines into a
  ;; single line.
  (defun unfill-paragraph ()
    "Replace newline chars in current paragraph by single spaces.
  This command does the reverse of `fill-paragraph'."
    (interactive)
    (let ((fill-column 90002000))
      (fill-paragraph nil)))

  (defun unfill-region (start end)
    "Replace newline chars in region by single spaces.
  This command does the reverse of `fill-region'."
    (interactive "r")
    (let ((fill-column 90002000))
      (fill-region start end))) 
#+END_SRC

#+RESULTS:
: unfill-region

** Swiper and search
#+BEGIN_SRC emacs-lisp
  ;; Swiper provides a fast search method.
  (use-package counsel :ensure t)
  (use-package swiper
    :ensure t
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (global-set-key (kbd "C-M-s") 'swiper)
      (global-set-key (kbd "C-c r") 'ivy-resume)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "<f1> f") 'counsel-describe-function)
      (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
      (global-set-key (kbd "<f1> l") 'counsel-load-library)
      (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
      (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
      (global-set-key (kbd "C-c g") 'counsel-git)
      (global-set-key (kbd "C-c j") 'counsel-git-grep)
      (global-set-key (kbd "C-c k") 'counsel-ag)
      (global-set-key (kbd "C-x l") 'counsel-locate)
      (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
      (define-key read-expression-map (kbd "C-r")
      'counsel-expression-history)))

  ;; Anzu displays the current match and the total matches information
  ;; in the mode-line.
  (use-package anzu
    :ensure t
    :init
      (anzu-mode +1)
      (global-anzu-mode +1)
    :config
      (setq anzu-cons-mode-line-p nil))

  ;; Search should be case-insensitive.
  (setq case-fold-search t)
#+END_SRC
** COMMENT Pdf-tools
#+BEGIN_SRC emacs-lisp
  ;; Read pdfs inside Emacs.
  (use-package pdf-tools
    :pin manual
    :ensure t
    :config 
      (pdf-tools-install)
      ; Display the pdf in a complete page.
      (setq-default pdf-view-display-size 'fit-page)
      ; Fine-grained zooming with + and -
      (setq pdf-view-resize-factor 1.1)
      
    :init 
      (add-hook 'pdf-tools-enabled-hook 
        (lambda () (setq-local beacon-mode nil))))
#+END_SRC

* Navigation
#+BEGIN_SRC emacs-lisp
  ;; It is possible to change windows in Emacs using 'C-x o', but
  ;; sometimes 'C-tab' still feels more intuitive to me.
  (global-set-key [C-tab] 'other-window)
  (global-set-key [C-iso-lefttab]
    (lambda ()
      (interactive)
      (other-window -1)))

  ;; Avy goto-char lets you jump to a given char on the screen just
  ;; by pressing 'C-.'.
  (use-package avy
    :ensure t
    :bind (
      ("C-." . avy-goto-char)
      ("C-ç" . avy-goto-char) ))

  (use-package windmove
    ;; :defer 4
    :ensure t
    :config
    ;; use command key on Mac
    (windmove-default-keybindings 'super)
    ;; wrap around at edges
    (setq windmove-wrap-around t))

  ;; Make windmove work in org-mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)

  ;; Better defaults via crux.
  ;(use-package crux
  ;  :bind (("C-a" . crux-move-beginning-of-line)))

  ;; Rectangle editing.
  (global-set-key (kbd "C-x <SPC>") 'cua-rectangle-mark-mode)
  
  ;; Window movement.
  (use-package ace-window
    :ensure t
    :config (global-set-key (kbd "M-o") 'ace-window))

  ;; We can follow links with goto-addr
  (use-package goto-addr
    :hook ((compilation-mode . goto-address-mode)
           (prog-mode . goto-address-prog-mode)
           (eshell-mode . goto-address-mode)
           (shell-mode . goto-address-mode))
    :bind (:map goto-address-highlight-keymap
                ("<RET>" . goto-address-at-point)
                ("M-<RET>" . newline))
    :commands (goto-address-prog-mode
               goto-address-mode))

  ;; We can narrow org buffers; sometimes we want an independent indirect buffer,
  ;; and this function creates it directly.
  ;; https://irreal.org/blog/?p=2602
  (defun narrow-to-region-indirect-buffer (start end)
    (interactive "r")
    (with-current-buffer (clone-indirect-buffer 
                          (generate-new-buffer-name 
                           (concat (buffer-name) "-indirect-" 
                                   (number-to-string start) "-" 
                                   (number-to-string end)))
                          'display)
      (narrow-to-region start end)
      (deactivate-mark)
      (goto-char (point-min))))

  (define-key global-map (kbd "C-x n b") 'narrow-to-region-indirect-buffer)
  (provide 'narrow-to-region-indirect-buffer)

  ;; Neotree provides a tree for directory navigation.
  (use-package neotree 
    :ensure t
    :config 
      (setq neo-theme 'arrow)
      (global-set-key [f9] 'neotree-toggle))

  ;; Ripgrep is an improved grep command.
  (use-package deadgrep
    :ensure t)

  ;; Ranger-style dired.
  (use-package ranger
    :ensure t)

  ;; Global line mode
  (global-visual-line-mode t)
#+END_SRC

* Org-mode
** Modules, plus-contrib
#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure org-plus-contrib
    :config (define-key org-mode-map (kbd "C-<tab>") nil))

  ;(require 'org-drill)
  ;(require 'org-habit)
  (require 'org-checklist)

  ;; List of modules
  ;(add-to-list 'org-modules "org-drill")
  ;; (add-to-list 'org-modules "org-bbdb")
  ;; (add-to-list 'org-modules "org-bibtex")
  ;; (add-to-list 'org-modules "org-docview")
  ;; (add-to-list 'org-modules "org-gnus")
  ;; (add-to-list 'org-modules "org-habit")
  ;; (add-to-list 'org-modules "org-info")
  ;; (add-to-list 'org-modules "org-irc")
  ;; (add-to-list 'org-modules "org-mhe")
  ;; (add-to-list 'org-modules "org-protocol")
  ;; (add-to-list 'org-modules "org-rmail")
  ;; (add-to-list 'org-modules "org-w3m")
  ;; (add-to-list 'org-modules "org-checklist")
#+END_SRC

** org-ref
#+BEGIN_SRC emacs-lisp
(use-package org-ref
  :ensure t)

(setq org-ref-notes-directory "~/org/"
      org-ref-bibliography-notes "~/org/Math.org"
      org-ref-default-bibliography '("~/org/Math.bib")
      org-ref-pdf-directory "~/pdf/")
#+END_SRC

*** Alternative click
#+BEGIN_SRC emacs-lisp
(defun m42/org-ref-cite-click (_key)
  (interactive)
  (setq paperid (thing-at-point 'word 'no-properties))
  (message "%s" paperid)
  (save-excursion (save-restriction
    (find-file "~/org/Math.org")
    (widen)
    (beginning-of-buffer)
    (if (search-forward (concat ":CUSTOM_ID: " paperid))
      (if (org-entry-get (point) "CUSTOM_ID")
        (org-noter)
        (message "No Interleave PDF found."))
      (message "No entry with CUSTOM_ID found.")
      ))))

(setq org-ref-cite-onclick-function 'm42/org-ref-cite-click)
#+END_SRC

#+RESULTS:
: m42/org-ref-cite-click

** helm/ivy-bibtex
#+BEGIN_SRC emacs-lisp
(use-package ivy-bibtex
  :ensure t)

(setq bibtex-completion-library-path "~/pdf/" ;; where your pdfs etc are stored
      bibtex-completion-bibliography "~/latex/bibliography.bib" ;; writing completion
      bibtex-completion-notes-path "~/org/Math.org")

(global-set-key (kbd "C-c ñ") 'ivy-bibtex)

(setq ivy-bibtex-default-action 'ivy-bibtex-insert-citation)
#+END_SRC

#+RESULTS:
: ivy-bibtex-insert-citation

** org-link-frame
#+BEGIN_SRC emacs-lisp
(setq org-link-frame-setup '(
  (vm . vm-visit-folder-other-frame)
  (vm-imap . vm-visit-imap-folder-other-frame)
  (gnus . org-gnus-no-new-news)
  (file . find-file-other-window)
  (wl . wl-other-frame)
  (cite . org-noter)
  ))
#+END_SRC

** Agenda
#+BEGIN_SRC emacs-lisp
  ;; Agenda commands.  Builds the personal agenda.
  (setq org-agenda-custom-commands
        '(("c" "Complete agenda, todo and waiting tasks" (

            ;; High priority tasks
            (tags-todo "-habit-notask+TODO=\"TODO\"-WAITUNTIL>\"<today>\"+PRIORITY=\"A\"" (
               (org-agenda-overriding-header "Priority")
               ;(org-agenda-files '("~/org/agenda/Tasks.org"))
               ))

            ;; Agenda and calendar
            (agenda "" (
               (org-agenda-overriding-header "Agenda") 
               (org-agenda-skip-function '(org-agenda-skip-entry-if 'regexp ":habit:"))
               ;(org-agenda-files '("~/org/agenda/Tasks.org" "~/org/GCalendar.org"))
               ))

            ;; Habits
            ;; (tags-todo "+habit-SCHEDULED>\"<today>\"" (
            ;;    (org-agenda-overriding-header "Habits")
            ;;    (org-agenda-files '("~/org/agenda/Tasks.org"))
            ;;    ))

            ;; General to-do's
            (tags-todo "-habit-notask+TODO=\"TODO\"-SCHEDULED>\"<today>\"-WAITUNTIL>\"<today>\"-PRIORITY=\"A\"-PRIORITY=\"C\"" (
               (org-agenda-overriding-header "Tasks")
               ;(org-agenda-files '("~/org/agenda/Tasks.org"))
               ))

           ;; Non-priority tasks
            (tags-todo "-habit-notask+TODO=\"TODO\"-SCHEDULED>\"<today>\"-WAITUNTIL>\"<today>\"+PRIORITY=\"C\"" (
               (org-agenda-overriding-header "Non-priority")
               ;(org-agenda-files '("~/org/agenda/Tasks.org"))
               ))


            ;; Waiting tasks
            ;; (tags-todo "-habit-notask+TODO=\"WAIT\"-SCHEDULED>\"<today>\"" (
            ;;    (org-agenda-overriding-header "Waiting")
            ;;    (org-agenda-files '("~/org/agenda/Tasks.org"))
            ;;    ))
            ))))

  ;; Agenda filters.
  (setq org-agenda-tag-filter-preset '("-notask"))
  (setq org-agenda-files '("~/org/GCalendar.org" "~/org/agenda" "~/org/math/notes"))
  (setq org-agenda-skip-scheduled-if-done t)
  (setq org-agenda-todo-ignore-scheduled 'past)
  (setq org-agenda-show-future-repeats nil)
  (setq org-agenda-start-day "-1d")
  (setq org-agenda-span 7)
  (setq org-agenda-skip-deadline-if-done t)
  (setq org-agenda-start-on-weekday nil)

  ;; Blocked tasks become invisible.
  ;; https://orgmode.org/manual/TODO-dependencies.html#TODO-dependencies
  (setq org-agenda-dim-blocked-tasks 'invisible)

  ;; Extensible dependencies for the org-mode agenda.
  (use-package org-edna
    :ensure t
    :config
      (org-edna-load))

  ;; Show only today's habits.
  (setq org-habit-show-habits-only-for-today t)

  ;; Prefix format for the Emacs agenda.
  (setq org-agenda-prefix-format 
    '((agenda . " %i %-12:c%?-12t% s")
     (todo . " %i %-12:c")
     (tags . " %i %-12:c")
     (search . " %i %-12:c")))

  ;; This makes the q command bury the agenda buffer when you've finished
  ;; with it, rather than close it. The result of this is that the agenda
  ;; will reappear immediately when you next ask for it, but it won't have
  ;; been updated since you last saw it. If you want it updated you can
  ;; always press g in the agenda to rebuild it properly.
  ;; https://emacs.stackexchange.com/a/861/12208
  (setq org-agenda-sticky t)

  ;; The block separator in the agenda. It has to be declared as a number.
  ;; For instance, 32 is the whitespace.
  (setq org-agenda-block-separator 32)

  ;; I prefer the mini-calendar prompt to start on Monday.
  ;; https://emacs.stackexchange.com/questions/42571/org-agenda-date-prompt-mini-calendar-start-week-on-monday
  (setq calendar-week-start-day 1)

  ;; Pregenerates an agenda buffer whenever Emacs is idle for more than 5
  ;; seconds. The next time the agenda command is run, generation takes
  ;; less than a second, since the org buffers have already been loaded.
  ;; https://emacs.stackexchange.com/a/820/12208
  ;  
  ;; Currently disabled because it blocks Emacs too often.
  ; (run-with-idle-timer 5 nil (lambda () (org-agenda-list) (delete-window)))

  ;; Automatically rebuilds the agenda when idle.
  ;  Currently disabled because it blocks Emacs too often.
  ;; (defun renewOrgBuffer ()
  ;;   (interactive)
  ;;   (dolist (buffer (buffer-list))
  ;;     (with-current-buffer buffer
  ;;       (when (derived-mode-p 'org-agenda-mode)
  ;;     (org-agenda-maybe-redo))))
  ;;   )
  ;; (run-with-idle-timer 60 1000 #'renewOrgBuffer)
#+END_SRC

#+RESULTS:
: 1

** org-refile
From [[https://www.reddit.com/r/emacs/comments/4366f9/how_do_orgrefiletargets_work/czg008y/][this reddit comment]].

#+BEGIN_SRC emacs-lisp
(setq org-math-wiki-files (directory-files "~/org/math/wiki/" 'full "org"))

(setq org-refile-targets '(
   (nil :maxlevel . 2) 
   (org-agenda-files :maxlevel . 2) 
   (org-math-wiki-files :maxlevel . 1)
   ("~/org/Someday.org" :maxlevel . 2)
   ("~/org/agenda/Tasks.org" :maxlevel . 2)
   ("~/org/Reference.org" :maxlevel . 2)
   ("~/org/Notes.org" :maxlevel . 2)
   ("~/org/agenda/Inbox.org" :maxlevel . 1)
   ("~/org/Archive.org" :maxlevel . 1)
   ("~/org/math" :maxlevel . 1))
)
(setq org-outline-path-complete-in-steps nil)         ; Refile in a single go
(setq org-refile-use-outline-path t)                  ; Show full paths for refiling
(setq org-refile-allow-creating-parent-nodes 'confirm)
#+END_SRC

#+RESULTS:
: confirm

From [[https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html][this post]], how to refile to the top level.

#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

#+RESULTS:

Save after refiling or archiving ([[https://emacs.stackexchange.com/questions/26923/org-mode-getting-errors-when-auto-saving-after-refiling][from SO]]).

#+BEGIN_SRC emacs-lisp
(advice-add 'org-refile :after
        (lambda (&rest _)
        (org-save-all-org-buffers)))
(advice-add 'org-archive-subtree :after
        (lambda (&rest _)
        (org-save-all-org-buffers)))
#+END_SRC

#+RESULTS:

*** archive
Stores org files in =~/org=. Defines location of index, agenda and todo files.

#+BEGIN_SRC emacs-lisp
  (setq org-directory m42/org-folder)
  (setq org-archive-location (concat m42/archive-file "::* From %s"))
#+END_SRC

** org-download
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :ensure t
  :config 
    (setq org-download-image-dir "~/org/images")
    (setq org-download-heading-lvl nil)
  :bind ("M-<print>" . org-download-screenshot))
#+END_SRC

** Keybindings
#+BEGIN_SRC emacs-lisp
  ;; Quickly jumps between headers.
  ;; https://emacs.stackexchange.com/a/32625/12208
  (setq org-goto-interface 'outline-path-completion)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-goto-max-level 2)

  ;; Speed commands work on headers. Pressing =n= there, for instance,
  ;; jumps to the next header.
  (setq org-use-speed-commands t)

  ;; These are basic keybindings for the agenda and org-capture.
  (setq org-export-coding-system 'utf-8)
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key "\C-cb" 'org-iswitchb)

  ;; Navigation between headings made easier.
  (add-hook 'org-mode-hook 
     (lambda ()
       (local-set-key "\M-n" 'outline-next-visible-heading)
       (local-set-key "\M-p" 'outline-previous-visible-heading)))

  ;; When set to t, asks for confirmation each time it executes an elisp
  ;; block.
  (setq org-confirm-elisp-link-function nil)
#+END_SRC

** Customization
#+BEGIN_SRC emacs-lisp
  ;; Pretty entities automatically draws '\alpha' as α when set as t.
  (setq org-pretty-entities nil)

  ;; Hierarchical statistics for checkboxes. checkboxes in subheaders
  ;; are considered for statistics when this is set as t.
  (setq org-checkbox-hierarchical-statistics t)

  ;; Sets a single bullet in org mode whose symbol is the asterisk. That
  ;; feels more sensible than having a list of different symbols.
  (use-package org-bullets :ensure t)
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  (setq org-bullets-bullet-list '("*"))

  ;; Automatically pseudoindents headers in org-mode when set to t.
  (setq org-startup-indented t)

  ;; Sets the emphasis for each one of the markers. In particular,
  ;; having 'ultra-bold' is useful when using Iosevka, that has a bold
  ;; version that is difficult to distinguish from the normal one.
  (setq org-emphasis-alist 
    '(("*" (:weight ultra-bold)) 
      ("/" italic) 
      ("_" underline) 
      ("=" org-verbatim verbatim) 
      ("~" org-code verbatim) 
      ("+" (:strike-through t))))

  ;; Hides emphasis markers while writing when set to t.
  (setq org-hide-emphasis-markers t)

  ;; Sets the column that tags must use.
  (setq org-tags-column -100)

  ;; "I tend to leave a blank line at the end of the content of each task
  ;; entry. This causes Org to automatically place a blank line before a
  ;; new heading or plain text list item, just the way I like it."
  ;; https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html
  (setq org-blank-before-new-entry (quote ((heading . t) (plain-list-item . auto))))

  ;; "I like to know when tasks have changed status. Setting this option
  ;; causes Org to insert an annotation in a task when it is marked as
  ;; done including a timestamp of when exactly that happened."
  ;; https://blog.aaronbieber.com/2016/01/30/dig-into-org-mode.html
  (setq org-log-done (quote time))

  ;; "Adding yet further auditing, this option causes Org to insert
  ;; annotations when you change the deadline of a task, which will note
  ;; the previous deadline date and when it was changed. Very useful for
  ;; figuring out how many times you “kicked the can down the road.”"
  ; (setq org-log-redeadline (quote time))
  ; (setq org-log-reschedule (quote time))
#+END_SRC

** Export
#+BEGIN_SRC emacs-lisp
  ;; Exporting to latex.
  (require 'ox-latex)

  ;; Exports to beamer. It needs to first define the beamer class.
  (add-to-list 'org-latex-classes
      '("beamer"
	"\\documentclass\[presentation\]\{beamer\}"
	("\\section\{%s\}" . "\\section*\{%s\}")
	("\\subsection\{%s\}" . "\\subsection*\{%s\}")
	("\\subsubsection\{%s\}" . "\\subsubsection*\{%s\}")))
  (require 'ox-beamer)

  ;; Exporting ignores headlines.
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))

  ;; Classes for latex exporting
  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
      '("scrbook" "\\documentclass{scrbook}"
       ("\\part{%s}" . "\\part*{%s}")
       ("\\chapter{%s}" . "\\chapter*{%s}")
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}"))))

  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
      '("tac" "\\documentclass{tac}"
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))

  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
      '("amsart" "\\documentclass{amsart}"
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
       )))

  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
      '("ociamthesis" "\\documentclass{ociamthesis}"
       ("\\chapter{%s}" . "\\chapter*{%s}")
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
       )))

  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
	       '("scrreprt" "\\documentclass{scrreprt}"
		 ("\\part{%s}" . "\\part*{%s}")
		 ("\\chapter{%s}" . "\\chapter*{%s}")
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}"))))

  (with-eval-after-load "ox-latex"
    (add-to-list 'org-latex-classes
	       '("myifcolog" "\\documentclass{myifcolog}"
		 ("\\section{%s}" . "\\section*{%s}")
		 ("\\subsection{%s}" . "\\subsection*{%s}")
		 ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
		 ("\\subsubsubsection{%s}" . "\\subsubsubsection*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}")
		 ("\\paragraph{%s}" . "\\paragraph*{%s}"))))


  ;; Exports minted code in latex.
  (setq org-latex-listings 'minted)
  ;(setq org-latex-packages-alist '(("" "minted")))
  ;(setq org-latex-minted-options '(("frame" "lines")))

  ;; The configuration allows us to do Reveal.js presentations using org-mode.
  ;; http://cestlaz.github.io/posts/using-emacs-11-reveal
  ;; (use-package ox-reveal 
  ;;   :init 
  ;;     (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
  ;;     (setq org-reveal-mathjax t))

  ;; (use-package htmlize)

  ;; ;; Twitter bootstrap exporting.
  ;; (use-package ox-twbs :ensure ox-twbs)
#+END_SRC

#+RESULTS:

** Babel
#+BEGIN_SRC emacs-lisp
  ;; Loads 'org-babel' language packages.
  (require 'ob-C)
  (require 'ob-python)

  ;; Function declaring the loaded languages.
  (org-babel-do-load-languages
   'org-babel-load-languages
    '( (ruby . t)
       (python . t)
       (haskell . t)
       (C . t)
       (emacs-lisp . t)
       (ditaa . t)
       (sagemath . t)
       (latex . t)
       (shell . t)
     ))

  ;; Untangles single blocks of code with a keystroke.
  (global-set-key (kbd "C-º") (lambda () (interactive) (org-babel-tangle '(4))))

  ;; Uses 'runhaskell' when it outputs the results. Taken from a great
  ;; article (in Japanese!) by Yoshinari Nomura.
  ;; http://quickhack.net/nom/blog/2012-08-31-org-babel-and-haskell.html]
  (defadvice org-babel-haskell-initiate-session
      (around org-babel-haskell-initiate-session-advice)
      (let* ((buff (get-buffer "*haskell*"))
             (proc (if buff (get-buffer-process buff)))
             (type (cdr (assoc :result-type 'params)))
             (haskell-program-name
              (if (equal type 'output) "runhaskell-ob" "ghci")))
        (if proc (kill-process proc))
        (sit-for 0)
        (if buff (kill-buffer buff))
          ad-do-it))  

  (ad-activate 'org-babel-haskell-initiate-session)

  ;; Path to Ditaa
  (setq org-ditaa-jar-path "/usr/share/java/ditaa/ditaa-0_9.jar")

  ;; https://emacs.stackexchange.com/a/8168/12208
  (setq org-src-window-setup 'current-window)

  ;; Preserve indentation and blank spaces. This also works when
  ;; exporting with minted.
  ;; https://anbasile.github.io/programming/2016/12/02/org-babel-is-cool/
  (setq org-src-preserve-indentation t)
#+END_SRC

#+RESULTS:
: t

*** Sage
#+BEGIN_SRC emacs-lisp
  ;; Ob-sagemath supports only evaluating with a session.
  (setq org-babel-default-header-args:sage '((:session . t)
                                             (:results . "output")))

  ;; C-c c for asynchronous evaluating (only for SageMath code blocks).
  ;  (with-eval-after-load "org"
  ;     (define-key org-mode-map (kbd "C-c c") 'ob-sagemath-execute-async))

  ;; Do not confirm before evaluation
  (setq org-confirm-babel-evaluate nil)

  ;; Do not evaluate code blocks when exporting.
  ; (setq org-export-babel-evaluate nil)

  ;; Show images when opening a file.
  (setq org-startup-with-inline-images t)

  ;; Show images after evaluating code blocks.
  (add-hook 'org-babel-after-execute-hook 'org-display-inline-images)
#+END_SRC

** Latex in org
#+BEGIN_SRC emacs-lisp
  ;; Keybinding for previewing formulas in latex.
  (global-set-key (kbd "C-ñ") 'org-toggle-latex-fragment)

  ;; Zooming.
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.2))

  ;; Abbreviations on 'latex-math-mode'. They require Latex to use
  ;; =latex-math-mode=. It is activated by default.
  (customize-set-variable 'LaTeX-math-abbrev-prefix "ç")
  (setq LaTeX-math-list
    (quote
      ((";" "mathbb{" "" nil)
       ("=" "cong" "" nil)
       ("<right>" "longrightarrow" "" nil)
       ("<left>" "longleftarrow" "" nil)
       ("C-<right>" "Longrightarrow" "" nil)
       ("C-<left>" "Longleftarrow" "" nil)
       ("^" "widehat" "" nil)
       ("~" "widetilde" "" nil)
       ("'" "\partial" "" nil)
       ("0" "varnothing" "" nil)
       ("C-(" "left(" "" nil)
       ("C-)" "right)" "" nil)
       )))

  ;; Auctex configuration
  (use-package tex :ensure auctex)
  (require 'latex)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'org-mode-hook 'LaTeX-math-mode)

  ;; cd-latex provides sensible keybindings for writing math.
  (use-package cdlatex :ensure t)
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)

  ;; Some packages must be added at the latex preview alist.  In
  ;; particular, this adds preview of commutative diagrams with the
  ;; 'tikz-cd' package.
  (eval-after-load "preview"
    '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))

  ;; Sets the backend for latex. Imagemagick works best with tikzcd.
  (setq org-preview-latex-default-process 'imagemagick)

  ;; No default packages should be loaded.
  (setq org-latex-default-packages-alist '())
#+END_SRC


** Notes and spaced repetition
#+BEGIN_SRC emacs-lisp
  ;; Org-noter provides support for note-taking on PDFs.
  (use-package org-noter :ensure t)

  ;; These options set where it will store the pdf and the location of
  ;; the notes.  They are the same ones that the Interleave package used,
  ;; keeping compatibility with it.
  (setq org-noter-property-doc-file "INTERLEAVE_PDF")
  (setq org-noter-property-note-location "INTERLEAVE_PAGE_NOTE")


  ;; Org-drill configurations. These variables control how org-drill
  ;; will work internally.
  (setq org-drill-learn-fraction 0.35)
  ;; It adds random noise to the retrieval process.
  (setq org-drill-add-random-noise-to-intervals-p t)
  ;; Limits the time an org-drill session can last.
  (setq org-drill-maximum-duration 25)
  ;; After the session, save all buffers.
  (setq org-drill-save-buffers-after-drill-sessions-p nil)
  (setq org-drill-hide-item-headings-p t)
  ;; Work on the whole directory
  (setq org-drill-scope 'file)

  ;; This is an auxiliary function that lets you study a single subtree
  ;; of an org file. It simply calls 'org-drill-cram' with the 'tree'
  ;; parameter.
  (defun m42/org-drill-cram-tree () (interactive) (org-drill-cram 'tree))

  ;; Org-id automatically provides an ID for each header when necessary:
  ;; for example, when creating a link.
  (require 'org-id)
  
  ;; We only want it to work if no custom id has been already created.
  (setq org-id-link-to-org-use-id 'create-if-interactive-and-no-custom-id)

  ;; Sensible defaults for ispell on org-mode, avoiding markers.
  ;; http://endlessparentheses.com/ispell-and-org-mode.html
  (defun endless/org-ispell ()
    "Configure `ispell-skip-region-alist' for `org-mode'."
    (make-local-variable 'ispell-skip-region-alist)
    (add-to-list 'ispell-skip-region-alist '(org-property-drawer-re))
    (add-to-list 'ispell-skip-region-alist '("~" "~"))
    (add-to-list 'ispell-skip-region-alist '("=" "="))
    (add-to-list 'ispell-skip-region-alist '("$" "$"))
    (add-to-list 'ispell-skip-region-alist '("\\[" "\\]"))
    (add-to-list 'ispell-skip-region-alist '("^#\\+BEGIN_SRC" . "^#\\+END_SRC")))
  (add-hook 'org-mode-hook #'endless/org-ispell)
#+END_SRC

** Capture
#+BEGIN_SRC emacs-lisp
  (require 'org-protocol)
  
  ;; List of org-capture-templates.
  (setq org-capture-templates (quote (
    ("j" "Journal" entry (file+datetree "~/org/Diary.org")
         "* %?" :empty-lines 1)
    ("r" "Research" entry (file+datetree "~/org/math/Research.org")
         "* %?" :empty-lines 1)
    ("c" "Contact" entry (file+headline "~/org/Contacts.org" "Inbox")
      "* %^{Name}
  :PROPERTIES:
  :EMAIL: %^{Email}
  :BIRTHDAY: %^{yyyy-mm-dd}
  :NOTE: %^{Note}
  :END:"
        :empty-lines 1)
      ("m" "mail" entry (file+headline "~/org/agenda/Tasks.org" "Mail")
           "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n%a\n\n")
      ("t" "todo" entry (file "~/org/agenda/Inbox.org")
           "* TODO %?\n:PROPERTIES:\n:CREATED: %(org-insert-time-stamp(org-read-date nil t \"+0d\"))\n:END:\n\n\n")
    )))
#+END_SRC

#+RESULTS:

** org-index
#+BEGIN_SRC emacs-lisp
  (use-package org-index
    :ensure t
    :config (global-set-key "\C-ci" 'org-index))
#+END_SRC

* Programming
** Programming languages
#+BEGIN_SRC emacs-lisp
;; Markdown
(use-package markdown-mode :ensure t)
(set-face-attribute 'fixed-pitch nil 
   :family "unspecified")
#+END_SRC

** Lisp
#+BEGIN_SRC emacs-lisp
  ;; Evaluates Lisp in place with 'C-c e'.
  ;; http://emacsredux.com/blog/2013/06/21/eval-and-replace/
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))
  (global-set-key (kbd "C-c e") 'eval-and-replace)
#+END_SRC

** Idris
#+BEGIN_SRC emacs-lisp
(use-package idris-mode :ensure t)
#+END_SRC

** Latex
#+BEGIN_SRC emacs-lisp
  (use-package tex
    :ensure auctex)

  (add-hook 'LaTeX-mode-hook (lambda () (local-set-key (kbd "C-ñ") #'preview-buffer)))

  (add-hook 'LaTeX-mode-hook
          '(lambda ()
            (define-key LaTeX-mode-map (kbd "$") 'self-insert-command)))

  ;; outline mode, making latex behave like org.
  (add-hook 'LaTeX-mode-hook #'outline-minor-mode)
#+END_SRC

*** outline magic
#+BEGIN_SRC emacs-lisp
;;; outline-magic.el --- outline mode extensions for Emacs

;; Copyright (C) 2002, 2013 Carsten Dominik, Thorsten Jolitz

;; Author: Carsten Dominik <dominik@science.uva.nl>
;; Maintainer: Thorsten Jolitz <tjolitz AT gmail DOT com>
;; Version: 0.9.1
;; Keywords: outlines

;; This file is not part of GNU Emacs.

;; GNU Emacs is free software; you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation; either version 2, or (at your option)
;; any later version.

;; GNU Emacs is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.

;; You should have received a copy of the GNU General Public License
;; along with GNU Emacs; see the file COPYING.  If not, write to the
;; Free Software Foundation, Inc., 59 Temple Place - Suite 330,
;; Boston, MA 02111-1307, USA.

;;; Commentary:

;; This file implements extensions for outline(-minor)-mode.
;;
;; - VISIBILITY CYCLING: A *single* command to replace the many
;;   outline commands for showing and hiding parts of a document.
;;
;; - STRUCTURE EDITING: Promotion, demotion and transposition of subtrees.
;;
;; Installation
;; ============
;;
;; Byte-compile outline-magic.el, put it on the load path and copy the
;; following into .emacs (adapting keybindings to your own preferences)
;;
;; (add-hook 'outline-mode-hook
;;           (lambda ()
;;             (require 'outline-cycle)))
;;
;; (add-hook 'outline-minor-mode-hook
;;           (lambda ()
;;             (require 'outline-magic)
;;             (define-key outline-minor-mode-map [(f10)] 'outline-cycle)))
;;
;; Usage
;; =====
;;
;; Visibility cycling
;; ------------------
;;
;; The command `outline-cycle' changes the visibility of text and headings
;; in the buffer.  Instead of using many different commands to show and
;; hide buffer parts, `outline-cycle' cycles through the most important
;; states of an outline buffer.  In the major `outline-mode', it will be
;; bound to the TAB key.  In `outline-minor-mode', the user can choose a
;; different keybinding.  The action of the command depends on the current
;; cursor location:
;;
;; 1. When point is at the beginning of the buffer, `outline-cycle'
;;    cycles the entire buffer through 3 different states:
;;      - OVERVIEW: Only top-level headlines are shown.
;;      - CONTENTS: All headlines are shown, but no body text.
;;      - SHOW ALL: Everything is shown.
;;
;; 2. When point in a headline, `outline-cycle' cycles the subtree started
;;    by this line through the following states:
;;      - FOLDED:   Only the headline is shown.
;;      - CHILDREN: The headline and its direct children are shown.  From
;;                  this state, you can move to one of the children and
;;                  zoom in further.
;;      - SUBTREE:  The entire subtree under the heading is shown.
;;
;; 3. At other positions, `outline-cycle' jumps back to the current heading.
;;    It can also be configured to emulate TAB at those positions, see
;;    the option `outline-cycle-emulate-tab'.
;;
;; Structure editing
;; -----------------
;;
;; Four commands are provided for structure editing.  The commands work on
;; the current subtree (the current headline plus all inferior ones). In
;; addition to menu access, the commands are assigned to the four arrow
;; keys pressed with a modifier (META by default) in the following way:
;;
;;                                 move up
;;                                    ^
;;                        promote  <- | ->  demote
;;                                    v
;;                                move down
;;
;; Thus, M-left will promote a subtree, M-up will move it up
;; vertically throught the structure.  Configure the variable
;; `outline-structedit-modifiers' to use different modifier keys.
;;
;; Moving subtrees
;; - - - - - - - -
;; The commands `outline-move-subtree-up' and `outline-move-subtree-down'
;; move the entire current subtree (folded or not) past the next same-level
;; heading in the given direction.  The cursor moves with the subtree, so
;; these commands can be used to "drag" a subtree to the wanted position.
;; For example, `outline-move-subtree-down' applied with the cursor at the
;; beginning of the "* Level 1b" line will change the tree like this:
;;
;;   * Level 1a                         * Level 1a
;;   * Level 1b         ===\            * Level 1c
;;   ** Level 2b        ===/            * Level 1b
;;   * Level 1c                         ** Level 2b
;;
;; Promotion/Demotion
;; - - - - - - - - - -
;; The commands `outline-promote' and `outline-demote' change the current
;; subtree to a different outline level - i.e. the level of all headings in
;; the tree is decreased or increased.  For example, `outline-demote'
;; applied with the cursor at the beginning of the "* Level 1b" line will
;; change the tree like this:
;;
;;   * Level 1a                         * Level 1a
;;   * Level 1b         ===\            ** Level 1b
;;   ** Level 2b        ===/            *** Level 2
;;   * Level 1c                         * Level 1c
;;
;; The reverse operation is `outline-promote'.  Note that the scope of
;; "current subtree" may be changed after a promotion.  To change all
;; headlines in a region, use transient-mark-mode and apply the command to
;; the region.
;;
;; NOTE: Promotion/Demotion in complex outline setups
;; - - - - - - - - - - - - - - - - - - - - - - - - - -
;; Promotion/demotion works easily in a simple outline setup where the
;; indicator of headings is just a polymer of a single character (e.g. "*"
;; in the default outline mode).  It can also work in more complicated
;; setups.  For example, in LaTeX-mode, sections can be promoted to
;; chapters and vice versa.  However, the outline setup for the mode must
;; meet two requirements:
;;
;; 1. `outline-regexp' must match the full text which has to be changed
;;    during promotion/demotion.  E.g. for LaTeX, it must match "\chapter"
;;    and not just "\chap".  Major modes like latex-mode, AUCTeX's
;;    latex-mode and texinfo-mode do this correctly.
;;
;; 2. The variable `outline-promotion-headings' must contain a sorted list
;;    of headings as matched by `outline-regexp'.  Each of the headings in
;;    `outline-promotion-headings' must be matched by `outline-regexp'.
;;    `outline-regexp' may match additional things - those matches will be
;;    ignored by the promotion commands.  If a mode has multiple sets of
;;    sectioning commands (for example the texinfo-mode with
;;    chapter...subsubsection and unnumbered...unnumberedsubsubsec), the
;;    different sets can all be listed in the same list, but must be
;;    separated by nil elements to avoid "promotion" accross sets.
;;    Examples:
;;
;;    (add-hook 'latex-mode-hook      ; or 'LaTeX-mode-hook for AUCTeX
;;     (lambda ()
;;       (setq outline-promotion-headings
;;             '("\\chapter" "\\section" "\\subsection"
;;               "\\subsubsection" "\\paragraph" "\\subparagraph"))))
;;
;;    (add-hook 'texinfo-mode-hook
;;     (lambda ()
;;      (setq outline-promotion-headings
;;       '("@chapter" "@section" "@subsection" "@subsubsection" nil
;;         "@unnumbered" "@unnumberedsec" "@unnumberedsubsec"
;;                                       "@unnumberedsubsubsec" nil
;;         "@appendix" "@appendixsec" "@appendixsubsec"
;;                                         "@appendixsubsubsec" nil
;;         "@chapheading" "@heading" "@subheading" "@subsubheading"))))
;;
;;    If people find this useful enough, maybe the maintainers of the
;;    modes can be persuaded to set `outline-promotion-headings'
;;    already as part of the mode setup.
;;
;;  Compatibility:
;;  --------------
;;  outline-magic was developed to work with the new outline.el
;;  implementation which uses text properties instead of selective display.
;;  If you are using XEmacs which still has the old implementation, most
;;  commands will work fine.  However, structure editing commands will
;;  require all relevant headlines to be visible.
;;
;;; Code:

(require 'outline)

;;; Visibility cycling

(defcustom outline-cycle-emulate-tab nil
  "Where should `outline-cycle' emulate TAB.
nil    Never
white  Only in completely white lines
t      Everywhere except in headlines"
  :group 'outlines
  :type '(choice (const :tag "Never" nil)
		 (const :tag "Only in completely white lines" white)
		 (const :tag "Everywhere except in headlines" t)
		 ))

(defvar outline-promotion-headings nil
  "A sorted list of headings used for promotion/demotion commands.
Set this to a list of headings as they are matched by `outline-regexp',
top-level heading first.  If a mode or document needs several sets of
outline headings (for example numbered and unnumbered sections), list
them set by set, separated by a nil element.  See the example for
`texinfo-mode' in the file commentary.")
(make-variable-buffer-local 'outline-promotion-headings)

;;;###autoload
(defun outline-cycle (&optional arg)
  "Visibility cycling for outline(-minor)-mode.

- When point is at the beginning of the buffer, or when called with a
  C-u prefix argument, rotate the entire buffer through 3 states:
  1. OVERVIEW: Show only top-level headlines.
  2. CONTENTS: Show all headlines of all levels, but no body text.
  3. SHOW ALL: Show everything.

- When point is at the beginning of a headline, rotate the subtree started
  by this line through 3 different states:
  1. FOLDED:   Only the main headline is shown.
  2. CHILDREN: The main headline and the direct children are shown.  From
               this state, you can move to one of the children and
               zoom in further.
  3. SUBTREE:  Show the entire subtree, including body text.

- When point is not at the beginning of a headline, execute
  `indent-relative', like TAB normally does."
  (interactive "P")
  (setq deactivate-mark t)
  (cond

   ((equal arg '(4))
    ; Run `outline-cycle' as if at the top of the buffer.
    (save-excursion
      (goto-char (point-min))
			(let ((current-prefix-argument nil))
      (outline-cycle nil))))

   (t
    (cond
     ((bobp) ;; Beginning of buffer: Global cycling

      (cond
       ((eq last-command 'outline-cycle-overview)
	;; We just created the overview - now do table of contents
	;; This can be slow in very large buffers, so indicate action
	(message "CONTENTS...")
	(save-excursion
	  ;; Visit all headings and show their offspring
	  (goto-char (point-max))
	  (catch 'exit
	    (while (and (progn (condition-case nil
				   (outline-previous-visible-heading 1)
				 (error (goto-char (point-min))))
			       t)
			(looking-at outline-regexp))
	      (show-branches)
	      (if (bobp) (throw 'exit nil))))
	  (message "CONTENTS...done"))
	(setq this-command 'outline-cycle-toc))
       ((eq last-command 'outline-cycle-toc)
	;; We just showed the table of contents - now show everything
	(show-all)
	(message "SHOW ALL")
	(setq this-command 'outline-cycle-showall))
       (t
	;; Default action: go to overview
	(let ((toplevel (cond
			 (current-prefix-arg (prefix-numeric-value current-prefix-arg))
			 ((save-excursion (beginning-of-line)
					  (looking-at outline-regexp))
			  (max 1 (funcall outline-level)))
			 (t 1))))
	  (hide-sublevels toplevel))
	(message "OVERVIEW")
	(setq this-command 'outline-cycle-overview))))

     ((save-excursion (beginning-of-line 1) (looking-at outline-regexp))
      ;; At a heading: rotate between three different views
      (outline-back-to-heading)
      (let ((goal-column 0) beg eoh eol eos)
	;; First, some boundaries
	(save-excursion
	  (outline-back-to-heading)           (setq beg (point))
	  (save-excursion (outline-next-line) (setq eol (point)))
	  (outline-end-of-heading)            (setq eoh (point))
	  (outline-end-of-subtree)            (setq eos (point)))
	;; Find out what to do next and set `this-command'
	(cond
	 ((= eos eoh)
	  ;; Nothing is hidden behind this heading
	  (message "EMPTY ENTRY"))
	 ((>= eol eos)
	  ;; Entire subtree is hidden in one line: open it
	  (show-entry)
	  (show-children)
	  (message "CHILDREN")
	  (setq this-command 'outline-cycle-children))
	 ((eq last-command 'outline-cycle-children)
	  ;; We just showed the children, now show everything.
	  (show-subtree)
	  (message "SUBTREE"))
	 (t
	  ;; Default action: hide the subtree.
	  (hide-subtree)
	  (message "FOLDED")))))

     ;; TAB emulation
     ((outline-cycle-emulate-tab)
      (indent-relative))

     (t
      ;; Not at a headline: Do indent-relative
      (outline-back-to-heading))))))

(defun outline-cycle-emulate-tab ()
  "Check if TAB should be emulated at the current position."
  ;; This is called after the check for point in a headline,
  ;; so we can assume we are not in a headline
  (if (and (eq outline-cycle-emulate-tab 'white)
	   (save-excursion
	     (beginning-of-line 1) (looking-at "[ \t]+$")))
      t
    outline-cycle-emulate-tab))

;;;###autoload
(defun outline-next-line ()
  "Forward line, but mover over invisible line ends.
Essentially a much simplified version of `next-line'."
  (interactive)
  (beginning-of-line 2)
  (while (and (not (eobp))
	      (get-char-property (1- (point)) 'invisible))
    (beginning-of-line 2)))

;;; Vertical tree motion

;;;###autoload
(defun outline-move-subtree-up (&optional arg)
  "Move the currrent subtree up past ARG headlines of the same level."
  (interactive "p")
  (let ((headers (or arg 1)))
    (outline-move-subtree-down (- headers))))

;;;###autoload
(defun outline-move-subtree-down (&optional arg)
  "Move the currrent subtree down past ARG headlines of the same level."
  (interactive "p")
  (let* ((headers (or arg 1))
        (re (concat "^" outline-regexp))
	(movfunc (if (> headers 0) 'outline-get-next-sibling
		   'outline-get-last-sibling))
	(ins-point (make-marker))
	(cnt (abs headers))
	beg end txt)
    ;; Select the tree
    (outline-back-to-heading)
    (setq beg (point))
    (outline-end-of-subtree)
    (if (= (char-after) ?\n) (forward-char 1))
    (setq end (point))
    ;; Find insertion point, with error handling
    (goto-char beg)
    (while (> cnt 0)
      (or (funcall movfunc)
	  (progn (goto-char beg)
		 (error "Cannot move past superior level")))
      (setq cnt (1- cnt)))
    (if (> headers 0)
	;; Moving forward - still need to move over subtree
	(progn (outline-end-of-subtree)
	       (if (= (char-after) ?\n) (forward-char 1))))
    (move-marker ins-point (point))
    (setq txt (buffer-substring beg end))
    (delete-region beg end)
    (insert txt)
    (goto-char ins-point)
    (move-marker ins-point nil)))

;;; Promotion and Demotion

;;;###autoload
(defun outline-promote (&optional arg)
  "Decrease the level of an outline-structure by ARG levels.
When the region is active in transient-mark-mode, all headlines in the
region are changed.  Otherwise the current subtree is targeted. Note that
after each application of the command the scope of \"current subtree\"
may have changed."
  (interactive "p")
  (let ((delta (or arg 1)))
    (outline-change-level (- delta))))

;;;###autoload
(defun outline-demote (&optional arg)
  "Increase the level of an outline-structure by ARG levels.
When the region is active in transient-mark-mode, all headlines in the
region are changed.  Otherwise the current subtree is targeted. Note that
after each application of the command the scope of \"current subtree\"
may have changed."
  (interactive "p")
  (let ((delta (or arg 1)))
    (outline-change-level delta)))

(defun outline-change-level (delta)
  "Workhorse for `outline-demote' and `outline-promote'."
  (let* ((headlist (outline-headings-list))
	 (atom (outline-headings-atom headlist))
	 (re (concat "^" outline-regexp))
	 (transmode (and transient-mark-mode mark-active))
	 beg end)

    ;; Find the boundaries for this operation
    (save-excursion
      (if transmode
	  (setq beg (min (point) (mark))
		end (max (point) (mark)))
	(outline-back-to-heading)
	(setq beg (point))
	(outline-end-of-heading)
	(outline-end-of-subtree)
	(setq end (point)))
      (setq beg (move-marker (make-marker) beg)
	    end (move-marker (make-marker) end))

      (let (head newhead level newlevel static)

	;; First a dry run to test if there is any trouble ahead.
	(goto-char beg)
	(while (re-search-forward re end t)
	  (outline-change-heading headlist delta atom 'test))

	;; Now really do replace the headings
	(goto-char beg)
	(while (re-search-forward re end t)
	  (outline-change-heading headlist delta atom))))))

(defun outline-headings-list ()
  "Return a list of relevant headings, either a user/mode defined
list, or an alist derived from scanning the buffer."
  (let (headlist)
    (cond
     (outline-promotion-headings
      ;; configured by the user or the mode
      (setq headlist outline-promotion-headings))

     ((and (eq major-mode 'outline-mode) (string= outline-regexp "[*\^L]+"))
      ;; default outline mode with original regexp
      ;; this need special treatment because of the \f in the regexp
      (setq headlist '(("*" . 1) ("**" . 2))))  ; will be extrapolated

     (t ;; Check if the buffer contains a complete set of headings
      (let ((re (concat "^" outline-regexp)) head level)
	(save-excursion
	  (goto-char (point-min))
	  (while (re-search-forward re nil t)
	    (save-excursion
	      (beginning-of-line 1)
	      (setq head (outline-cleanup-match (match-string 0))
		    level (funcall outline-level))
	      (add-to-list  'headlist (cons head level))))))
      ;; Check for uniqueness of levels in the list
      (let* ((hl headlist) entry level seen nonunique)
	(while (setq entry (car hl))
	  (setq hl (cdr hl)
		level (cdr entry))
	  (if (and (not (outline-static-level-p level))
		   (member level seen))
	      ;; We have two entries for the same level.
	      (add-to-list 'nonunique level))
	  (add-to-list 'seen level))
	(if nonunique
	    (error "Cannot promote/demote: non-unique headings at level %s\nYou may want to configure `outline-promotion-headings'."
		   (mapconcat 'int-to-string nonunique ","))))))
    ;; OK, return the list
    headlist))

(defun outline-change-heading (headlist delta atom &optional test)
  "Change heading just matched by `outline-regexp' by DELTA levels.
HEADLIST can be either an alist ((\"outline-match\" . level)...) or a
straight list like `outline-promotion-headings'. ATOM is a character
if all headlines are composed of a single character.
If TEST is non-nil, just prepare the change and error if there are problems.
TEST nil means, really replace old heading with new one."
  (let* ((head (outline-cleanup-match (match-string 0)))
	 (level (save-excursion
		  (beginning-of-line 1)
		  (funcall outline-level)))
	 (newhead  ; compute the new head
	  (cond
	   ((= delta 0) t)
	   ((outline-static-level-p level) t)
	   ((null headlist) nil)
	   ((consp (car headlist))
	    ;; The headlist is an association list
	    (or (car (rassoc (+ delta level) headlist))
		(and atom
		     (> (+ delta level) 0)
		     (make-string (+ delta level) atom))))
	   (t
	    ;; The headlist is a straight list - grab the correct element.
	    (let* ((l (length headlist))
		   (n1 (- l (length (member head headlist)))) ; index old
		   (n2 (+ delta n1)))                         ; index new
	      ;; Careful checking
	      (cond
	       ((= n1 l) nil)                ; head not found
	       ((< n2 0) nil)                ; newlevel too low
	       ((>= n2 l) nil)               ; newlevel too high
	       ((let* ((tail (nthcdr (min n1 n2) headlist))
		       (nilpos (- (length tail) (length (memq nil tail)))))
		  (< nilpos delta))          ; nil element between old and new
		nil)
	       (t (nth n2 headlist))))))))      ; OK, we have a match!
    (if (not newhead)
	(error "Cannot shift level %d heading \"%s\" to level %d"
	       level head (+ level delta)))
    (if (and (not test) (stringp newhead))
	(save-excursion
	  (beginning-of-line 1)
	  (or (looking-at (concat "[ \t]*\\(" (regexp-quote head) "\\)"))
	      (error "Please contact maintainer"))
	  (replace-match (outline-cleanup-match newhead) t t nil 1)))))

(defun outline-headings-atom (headlist)
  "Use the list created by `outline-headings-list' and check if all
headings are polymers of a single character, e.g. \"*\".
If yes, return this character."
  (if (consp (car headlist))
      ;; this is an alist - it makes sense to check for atomic structure
      (let ((re (concat "\\`"
			(regexp-quote (substring (car (car headlist)) 0 1))
			"+\\'")))
	(if (not (delq nil (mapcar (lambda (x) (not (string-match re (car x))))
				   headlist)))
	    (string-to-char (car (car headlist)))))))

(defun outline-cleanup-match (s)
  "Remove text properties and start/end whitespace from a string."
  (set-text-properties 1 (length s) nil s)
  (save-match-data
    (if (string-match "^[ \t]+" s) (setq s (replace-match "" t t s)))
    (if (string-match "[ \t]+$" s) (setq s (replace-match "" t t s))))
  s)

(defun outline-static-level-p (level)
  "Test if a level should not be changed by level promotion/demotion."
  (>= level 1000))

;;; Key bindings

(defcustom outline-structedit-modifiers '(meta)
  "List of modifiers for outline structure editing with the arrow keys."
  :group 'outlines
  :type '(repeat symbol))

(define-key outline-mode-map [(tab)] 'outline-cycle)
(let ((keys '((left . outline-promote)
	      (right . outline-demote)
	      (up . outline-move-subtree-up)
	      (down . outline-move-subtree-down)))
      key)
  (while (setq key (pop keys))
    (apply 'define-key outline-mode-map
	   (list
	    (vector (append outline-structedit-modifiers (list (car key))))
	    (cdr key)))))

;;; Menu entries

(define-key outline-mode-menu-bar-map [headings outline-move-subtree-down]
  '("Move subtree down" . outline-move-subtree-down))
(define-key outline-mode-menu-bar-map [headings outline-move-subtree-up]
  '("Move subtree up" . outline-move-subtree-up))
(define-key outline-mode-menu-bar-map [headings outline-demote]
  '("Demote by 1 level" . outline-demote))
(define-key outline-mode-menu-bar-map [headings outline-promote]
  '("Promote by 1 level" . outline-promote))
(define-key outline-mode-menu-bar-map [show outline-cycle]
  '("Rotate visibility" . outline-cycle))
(define-key outline-mode-menu-bar-map [hide outline-cycle]
  '("Rotate visibility" . outline-cycle))

;;; Finish up

; (provide 'outline-magic)

;;; outline-magic.el ends here
#+END_SRC

#+BEGIN_SRC emacs-lisp
 (add-hook 'outline-minor-mode-hook
           (lambda ()
             (define-key outline-minor-mode-map [(tab)] 'outline-cycle)
             (define-key outline-minor-mode-map (kbd "C-c C-n") 'outline-next-visible-heading)
             (define-key outline-minor-mode-map (kbd "C-c C-p") 'outline-previous-visible-heading)
             (setq outline-cycle-emulate-tab t)
             ))
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp
;; extra outline headers 
(setq TeX-outline-extra
      '(("%chapter" 1)
        ("%section" 2)
        ("%subsection" 3)
        ("%subsubsection" 4)
        ("%paragraph" 5)))

;; add font locking to the headers
(font-lock-add-keywords
 'latex-mode
 '(("^%\\(chapter\\|\\(sub\\|subsub\\)?section\\|paragraph\\)"
    0 'font-lock-keyword-face t)
   ("^%chapter{\\(.*\\)}"       1 'font-latex-sectioning-1-face t)
   ("^%section{\\(.*\\)}"       1 'font-latex-sectioning-2-face t)
   ("^%subsection{\\(.*\\)}"    1 'font-latex-sectioning-3-face t)
   ("^%subsubsection{\\(.*\\)}" 1 'font-latex-sectioning-4-face t)
   ("^%paragraph{\\(.*\\)}"     1 'font-latex-sectioning-5-face t)))
#+END_SRC

#+RESULTS:

*** Pdf generation process
#+BEGIN_SRC emacs-lisp
  (setq org-latex-pdf-process
	'("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
    "bibtex %b"
    "makeindex %b"
    "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
    "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

*** Fontify-titles
#+BEGIN_SRC emacs-lisp
  (setq font-latex-fontify-sectioning 'color)
  (setq font-latex-fontify-sectioning 1.0)
  (setq font-latex-slide-title-face 1.0)
  (setq font-latex-fontify-script nil)
  (fset 'tex-font-lock-suscript 'ignore)

  ; (set-face-attribute 'font-latex-sectioning-1-face nil 
  ;    :weight 'bold
  ;    :height 1.0)

  ;(set-face-attribute 'font-latex-sectioning-2-face nil 
  ;   :weight 'bold
  ;   :height 1.0)

  ;(set-face-attribute 'font-latex-sectioning-3-face nil 
  ;   :weight 'bold
  ;   :height 1.0)
#+END_SRC
** Agda input
#+BEGIN_SRC emacs-lisp
;;; agda-input.el --- The Agda input method

;;; Commentary:

;; A highly customisable input method which can inherit from other
;; Quail input methods. By default the input method is geared towards
;; the input of mathematical and other symbols in Agda programs.
;;
;; Use M-x customize-group agda-input to customise this input method.
;; Note that the functions defined under "Functions used to tweak
;; translation pairs" below can be used to tweak both the key
;; translations inherited from other input methods as well as the
;; ones added specifically for this one.
;;
;; Use agda-input-show-translations to see all the characters which
;; can be typed using this input method (except for those
;; corresponding to ASCII characters).

;;; Code:

(require 'quail)
(require 'cl)
;; Quail is quite stateful, so be careful when editing this code.  Note
;; that with-temp-buffer is used below whenever buffer-local state is
;; modified.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Utility functions

(defun agda-input-concat-map (f xs)
  "Concat (map F XS)."
  (apply 'append (mapcar f xs)))

(defun agda-input-to-string-list (s)
  "Convert a string S to a list of one-character strings, after
removing all space and newline characters."
  (agda-input-concat-map
   (lambda (c) (if (member c (string-to-list " \n"))
              nil
            (list (string c))))
   (string-to-list s)))

(defun agda-input-character-range (from to)
  "A string consisting of the characters from FROM to TO."
  (let (seq)
    (dotimes (i (1+ (- to from)))
      (setq seq (cons (+ from i) seq)))
    (concat (nreverse seq))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Functions used to tweak translation pairs

;; lexical-let is used since Elisp lacks lexical scoping.

(defun agda-input-compose (f g)
  "\x -> concatMap F (G x)"
  (lexical-let ((f1 f) (g1 g))
    (lambda (x) (agda-input-concat-map f1 (funcall g1 x)))))

(defun agda-input-or (f g)
  "\x -> F x ++ G x"
  (lexical-let ((f1 f) (g1 g))
    (lambda (x) (append (funcall f1 x) (funcall g1 x)))))

(defun agda-input-nonempty ()
  "Only keep pairs with a non-empty first component."
  (lambda (x) (if (> (length (car x)) 0) (list x))))

(defun agda-input-prepend (prefix)
  "Prepend PREFIX to all key sequences."
  (lexical-let ((prefix1 prefix))
    (lambda (x) `((,(concat prefix1 (car x)) . ,(cdr x))))))

(defun agda-input-prefix (prefix)
  "Only keep pairs whose key sequence starts with PREFIX."
  (lexical-let ((prefix1 prefix))
    (lambda (x)
      (if (equal (substring (car x) 0 (length prefix1)) prefix1)
          (list x)))))

(defun agda-input-suffix (suffix)
  "Only keep pairs whose key sequence ends with SUFFIX."
  (lexical-let ((suffix1 suffix))
    (lambda (x)
      (if (equal (substring (car x)
                            (- (length (car x)) (length suffix1)))
                 suffix1)
          (list x)))))

(defun agda-input-drop (ss)
  "Drop pairs matching one of the given key sequences.
SS should be a list of strings."
  (lexical-let ((ss1 ss))
    (lambda (x) (unless (member (car x) ss1) (list x)))))

(defun agda-input-drop-beginning (n)
  "Drop N characters from the beginning of each key sequence."
  (lexical-let ((n1 n))
    (lambda (x) `((,(substring (car x) n1) . ,(cdr x))))))

(defun agda-input-drop-end (n)
  "Drop N characters from the end of each key sequence."
  (lexical-let ((n1 n))
    (lambda (x)
      `((,(substring (car x) 0 (- (length (car x)) n1)) .
         ,(cdr x))))))

(defun agda-input-drop-prefix (prefix)
  "Only keep pairs whose key sequence starts with PREFIX.
This prefix is dropped."
  (agda-input-compose
   (agda-input-drop-beginning (length prefix))
   (agda-input-prefix prefix)))

(defun agda-input-drop-suffix (suffix)
  "Only keep pairs whose key sequence ends with SUFFIX.
This suffix is dropped."
  (lexical-let ((suffix1 suffix))
    (agda-input-compose
     (agda-input-drop-end (length suffix1))
     (agda-input-suffix suffix1))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Customization

;; The :set keyword is set to 'agda-input-incorporate-changed-setting
;; so that the input method gets updated immediately when users
;; customize it. However, the setup functions cannot be run before all
;; variables have been defined. Hence the :initialize keyword is set to
;; 'custom-initialize-default to ensure that the setup is not performed
;; until agda-input-setup is called at the end of this file.

(defgroup agda-input nil
  "The Agda input method.
After tweaking these settings you may want to inspect the resulting
translations using `agda-input-show-translations'."
  :group 'agda2
  :group 'leim)

(defcustom agda-input-tweak-all
  '(agda-input-compose
    (agda-input-prepend "\\")
    (agda-input-nonempty))
  "An expression yielding a function which can be used to tweak
all translations before they are included in the input method.
The resulting function (if non-nil) is applied to every
\(KEY-SEQUENCE . TRANSLATION) pair and should return a list of such
pairs. (Note that the translations can be anything accepted by
`quail-defrule'.)
If you change this setting manually (without using the
customization buffer) you need to call `agda-input-setup' in
order for the change to take effect."
  :group 'agda-input
  :set 'agda-input-incorporate-changed-setting
  :initialize 'custom-initialize-default
  :type 'sexp)

(defcustom agda-input-inherit
  `(("TeX" . (agda-input-compose
              (agda-input-drop '("geq" "leq" "bullet" "qed" "par"))
              (agda-input-or
               (agda-input-drop-prefix "\\")
               (agda-input-or
                (agda-input-compose
                 (agda-input-drop '("^l" "^o" "^r" "^v"))
                 (agda-input-prefix "^"))
                (agda-input-prefix "_")))))
    )
  "A list of Quail input methods whose translations should be
inherited by the Agda input method (with the exception of
translations corresponding to ASCII characters).
The list consists of pairs (qp . tweak), where qp is the name of
a Quail package, and tweak is an expression of the same kind as
`agda-input-tweak-all' which is used to tweak the translation
pairs of the input method.
The inherited translation pairs are added last, after
`agda-input-user-translations' and `agda-input-translations'.
If you change this setting manually (without using the
customization buffer) you need to call `agda-input-setup' in
order for the change to take effect."
  :group 'agda-input
  :set 'agda-input-incorporate-changed-setting
  :initialize 'custom-initialize-default
  :type '(repeat (cons (string :tag "Quail package")
                       (sexp :tag "Tweaking function"))))

(defcustom agda-input-translations
  (let ((max-lisp-eval-depth 2800)) `(

  ;; Equality and similar symbols.

  ("eq"  . ,(agda-input-to-string-list "=∼∽≈≋∻∾∿≀≃⋍≂≅ ≌≊≡≣≐≑≒≓≔≕≖≗≘≙≚≛≜≝≞≟≍≎≏≬⋕"))
  ("eqn" . ,(agda-input-to-string-list "≠≁ ≉     ≄  ≇≆  ≢                 ≭    "))

                    ("=n"  . ("≠"))
  ("~"    . ("∼"))  ("~n"  . ("≁"))
  ("~~"   . ("≈"))  ("~~n" . ("≉"))
  ("~~~"  . ("≋"))
  (":~"   . ("∻"))
  ("~-"   . ("≃"))  ("~-n" . ("≄"))
  ("-~"   . ("≂"))
  ("~="   . ("≅"))  ("~=n" . ("≇"))
  ("~~-"  . ("≊"))
  ("=="   . ("≡"))  ("==n" . ("≢"))
  ("==="  . ("≣"))
  (".="   . ("≐"))  (".=." . ("≑"))
  (":="   . ("≔"))  ("=:"  . ("≕"))
  ("=o"   . ("≗"))
  ("(="   . ("≘"))
  ("and=" . ("≙"))  ("or=" . ("≚"))
  ("*="   . ("≛"))
  ("t="   . ("≜"))
  ("def=" . ("≝"))
  ("m="   . ("≞"))
  ("?="   . ("≟"))

  ;; Inequality and similar symbols.

  ("leq"  . ,(agda-input-to-string-list "<≪⋘≤≦≲ ≶≺≼≾⊂⊆ ⋐⊏⊑ ⊰⊲⊴⋖⋚⋜⋞"))
  ("leqn" . ,(agda-input-to-string-list "≮  ≰≨≴⋦≸⊀ ⋨⊄⊈⊊  ⋢⋤ ⋪⋬   ⋠"))
  ("geq"  . ,(agda-input-to-string-list ">≫⋙≥≧≳ ≷≻≽≿⊃⊇ ⋑⊐⊒ ⊱⊳⊵⋗⋛⋝⋟"))
  ("geqn" . ,(agda-input-to-string-list "≯  ≱≩≵⋧≹⊁ ⋩⊅⊉⊋  ⋣⋥ ⋫⋭   ⋡"))

  ("<="   . ("≤"))  (">="   . ("≥"))
  ("<=n"  . ("≰"))  (">=n"  . ("≱"))
  ("len"  . ("≰"))  ("gen"  . ("≱"))
  ("<n"   . ("≮"))  (">n"   . ("≯"))
  ("<~"   . ("≲"))  (">~"   . ("≳"))
  ("<~n"  . ("⋦"))  (">~n"  . ("⋧"))
  ("<~nn" . ("≴"))  (">~nn" . ("≵"))

  ("sub"   . ("⊂"))  ("sup"   . ("⊃"))
  ("subn"  . ("⊄"))  ("supn"  . ("⊅"))
  ("sub="  . ("⊆"))  ("sup="  . ("⊇"))
  ("sub=n" . ("⊈"))  ("sup=n" . ("⊉"))

  ("squb"   . ("⊏"))  ("squp"   . ("⊐"))
  ("squb="  . ("⊑"))  ("squp="  . ("⊒"))
  ("squb=n" . ("⋢"))  ("squp=n" . ("⋣"))

  ;; Set membership etc.

  ("member" . ,(agda-input-to-string-list "∈∉∊∋∌∍⋲⋳⋴⋵⋶⋷⋸⋹⋺⋻⋼⋽⋾⋿"))

  ("inn" . ("∉"))
  ("nin" . ("∌"))

  ;; Intersections, unions etc.

  ("intersection" . ,(agda-input-to-string-list "∩⋂∧⋀⋏⨇⊓⨅⋒∏ ⊼      ⨉"))
  ("union"        . ,(agda-input-to-string-list "∪⋃∨⋁⋎⨈⊔⨆⋓∐⨿⊽⊻⊍⨃⊎⨄⊌∑⅀"))

  ("and" . ("∧"))  ("or"  . ("∨"))
  ("And" . ("⋀"))  ("Or"  . ("⋁"))
  ("i"   . ("∩"))  ("un"  . ("∪"))  ("u+" . ("⊎"))  ("u." . ("⊍"))
  ("I"   . ("⋂"))  ("Un"  . ("⋃"))  ("U+" . ("⨄"))  ("U." . ("⨃"))
  ("glb" . ("⊓"))  ("lub" . ("⊔"))
  ("Glb" . ("⨅"))  ("Lub" . ("⨆"))

  ;; Entailment etc.

  ("entails" . ,(agda-input-to-string-list "⊢⊣⊤⊥⊦⊧⊨⊩⊪⊫⊬⊭⊮⊯"))

  ("|-"   . ("⊢"))  ("|-n"  . ("⊬"))
  ("-|"   . ("⊣"))
  ("|="   . ("⊨"))  ("|=n"  . ("⊭"))
  ("||-"  . ("⊩"))  ("||-n" . ("⊮"))
  ("||="  . ("⊫"))  ("||=n" . ("⊯"))
  ("|||-" . ("⊪"))

  ;; Divisibility, parallelity.

  ("|"  . ("∣"))  ("|n"  . ("∤"))
  ("||" . ("∥"))  ("||n" . ("∦"))

  ;; Some symbols from logic and set theory.

  ("all" . ("∀"))
  ("ex"  . ("∃"))
  ("exn" . ("∄"))
  ("0"   . ("∅"))
  ("C"   . ("∁"))

  ;; Corners, ceilings and floors.

  ("c"  . ,(agda-input-to-string-list "⌜⌝⌞⌟⌈⌉⌊⌋"))
  ("cu" . ,(agda-input-to-string-list "⌜⌝  ⌈⌉  "))
  ("cl" . ,(agda-input-to-string-list "  ⌞⌟  ⌊⌋"))

  ("cul" . ("⌜"))  ("cuL" . ("⌈"))
  ("cur" . ("⌝"))  ("cuR" . ("⌉"))
  ("cll" . ("⌞"))  ("clL" . ("⌊"))
  ("clr" . ("⌟"))  ("clR" . ("⌋"))

  ;; Various operators/symbols.

  ("qed"       . ("∎"))
  ("x"         . ("×"))
  ("o"         . ("∘"))
  ("comp"      . ("∘"))
  ("."         . ("∙"))
  ("*"         . ("⋆"))
  (".+"        . ("∔"))
  (".-"        . ("∸"))
  (":"         . ("∶"))
  ("::"        . ("∷"))
  ("::-"       . ("∺"))
  ("-:"        . ("∹"))
  ("+ "        . ("⊹"))
  ("surd3"     . ("∛"))
  ("surd4"     . ("∜"))
  ("increment" . ("∆"))
  ("inf"       . ("∞"))
  ("&"         . ("⅋"))

  ;; Circled operators.

  ("o+"  . ("⊕"))
  ("o--" . ("⊖"))
  ("ox"  . ("⊗"))
  ("o/"  . ("⊘"))
  ("o."  . ("⊙"))
  ("oo"  . ("⊚"))
  ("o*"  . ("⊛"))
  ("o="  . ("⊜"))
  ("o-"  . ("⊝"))

  ("O+"  . ("⨁"))
  ("Ox"  . ("⨂"))
  ("O."  . ("⨀"))
  ("O*"  . ("⍟"))

  ;; Boxed operators.

  ("b+" . ("⊞"))
  ("b-" . ("⊟"))
  ("bx" . ("⊠"))
  ("b." . ("⊡"))

  ;; Various symbols.

  ("integral" . ,(agda-input-to-string-list "∫∬∭∮∯∰∱∲∳"))
  ("angle"    . ,(agda-input-to-string-list "∟∡∢⊾⊿"))
  ("join"     . ,(agda-input-to-string-list "⋈⋉⋊⋋⋌⨝⟕⟖⟗"))

  ;; Arrows.

  ("l"  . ,(agda-input-to-string-list "←⇐⇚⇇⇆↤⇦↞↼↽⇠⇺↜⇽⟵⟸↚⇍⇷ ↹     ↢↩↫⇋⇜⇤⟻⟽⤆↶↺⟲                                     "))
  ("r"  . ,(agda-input-to-string-list "→⇒⇛⇉⇄↦⇨↠⇀⇁⇢⇻↝⇾⟶⟹↛⇏⇸⇶ ↴    ↣↪↬⇌⇝⇥⟼⟾⤇↷↻⟳⇰⇴⟴⟿ ➵➸➙➔➛➜➝➞➟➠➡➢➣➤➧➨➩➪➫➬➭➮➯➱➲➳➺➻➼➽➾⊸"))
  ("u"  . ,(agda-input-to-string-list "↑⇑⟰⇈⇅↥⇧↟↿↾⇡⇞          ↰↱➦ ⇪⇫⇬⇭⇮⇯                                           "))
  ("d"  . ,(agda-input-to-string-list "↓⇓⟱⇊⇵↧⇩↡⇃⇂⇣⇟         ↵↲↳➥ ↯                                                "))
  ("ud" . ,(agda-input-to-string-list "↕⇕   ↨⇳                                                                    "))
  ("lr" . ,(agda-input-to-string-list "↔⇔         ⇼↭⇿⟷⟺↮⇎⇹                                                        "))
  ("ul" . ,(agda-input-to-string-list "↖⇖                        ⇱↸                                               "))
  ("ur" . ,(agda-input-to-string-list "↗⇗                                         ➶➹➚                             "))
  ("dr" . ,(agda-input-to-string-list "↘⇘                        ⇲                ➴➷➘                             "))
  ("dl" . ,(agda-input-to-string-list "↙⇙                                                                         "))

  ("l-"  . ("←"))  ("<-"  . ("←"))  ("l="  . ("⇐"))
  ("r-"  . ("→"))  ("->"  . ("→"))  ("r="  . ("⇒"))  ("=>"  . ("⇒"))
  ("u-"  . ("↑"))                   ("u="  . ("⇑"))
  ("d-"  . ("↓"))                   ("d="  . ("⇓"))
  ("ud-" . ("↕"))                   ("ud=" . ("⇕"))
  ("lr-" . ("↔"))  ("<->" . ("↔"))  ("lr=" . ("⇔"))  ("<=>" . ("⇔"))
  ("ul-" . ("↖"))                   ("ul=" . ("⇖"))
  ("ur-" . ("↗"))                   ("ur=" . ("⇗"))
  ("dr-" . ("↘"))                   ("dr=" . ("⇘"))
  ("dl-" . ("↙"))                   ("dl=" . ("⇙"))

  ("l==" . ("⇚"))  ("l-2" . ("⇇"))                   ("l-r-" . ("⇆"))
  ("r==" . ("⇛"))  ("r-2" . ("⇉"))  ("r-3" . ("⇶"))  ("r-l-" . ("⇄"))
  ("u==" . ("⟰"))  ("u-2" . ("⇈"))                   ("u-d-" . ("⇅"))
  ("d==" . ("⟱"))  ("d-2" . ("⇊"))                   ("d-u-" . ("⇵"))

  ("l--"  . ("⟵"))  ("<--"  . ("⟵"))  ("l~"  . ("↜" "⇜"))
  ("r--"  . ("⟶"))  ("-->"  . ("⟶"))  ("r~"  . ("↝" "⇝" "⟿"))
  ("lr--" . ("⟷"))  ("<-->" . ("⟷"))  ("lr~" . ("↭"))

  ("l-n"  . ("↚"))  ("<-n"  . ("↚"))  ("l=n"  . ("⇍"))
  ("r-n"  . ("↛"))  ("->n"  . ("↛"))  ("r=n"  . ("⇏"))  ("=>n"  . ("⇏"))
  ("lr-n" . ("↮"))  ("<->n" . ("↮"))  ("lr=n" . ("⇎"))  ("<=>n" . ("⇎"))

  ("l-|"  . ("↤"))  ("ll-" . ("↞"))
  ("r-|"  . ("↦"))  ("rr-" . ("↠"))
  ("u-|"  . ("↥"))  ("uu-" . ("↟"))
  ("d-|"  . ("↧"))  ("dd-" . ("↡"))
  ("ud-|" . ("↨"))

  ("l->" . ("↢"))
  ("r->" . ("↣"))

  ("r-o" . ("⊸"))  ("-o"  . ("⊸"))

  ("dz" . ("↯"))

  ;; Ellipsis.

  ("..." . ,(agda-input-to-string-list "⋯⋮⋰⋱"))

  ;; Box-drawing characters.

  ("---" . ,(agda-input-to-string-list "─│┌┐└┘├┤┬┼┴╴╵╶╷╭╮╯╰╱╲╳"))
  ("--=" . ,(agda-input-to-string-list "═║╔╗╚╝╠╣╦╬╩     ╒╕╘╛╞╡╤╪╧ ╓╖╙╜╟╢╥╫╨"))
  ("--_" . ,(agda-input-to-string-list "━┃┏┓┗┛┣┫┳╋┻╸╹╺╻
                                        ┍┯┑┕┷┙┝┿┥┎┰┒┖┸┚┠╂┨┞╀┦┟╁┧┢╈┪┡╇┩
                                        ┮┭┶┵┾┽┲┱┺┹╊╉╆╅╄╃ ╿╽╼╾"))
  ("--." . ,(agda-input-to-string-list "╌╎┄┆┈┊
                                        ╍╏┅┇┉┋"))

  ;; Triangles.

  ;; Big/small, black/white.

  ("t" . ,(agda-input-to-string-list "◂◃◄◅▸▹►▻▴▵▾▿◢◿◣◺◤◸◥◹"))
  ("T" . ,(agda-input-to-string-list "◀◁▶▷▲△▼▽◬◭◮"))

  ("tb" . ,(agda-input-to-string-list "◂▸▴▾◄►◢◣◤◥"))
  ("tw" . ,(agda-input-to-string-list "◃▹▵▿◅▻◿◺◸◹"))

  ("Tb" . ,(agda-input-to-string-list "◀▶▲▼"))
  ("Tw" . ,(agda-input-to-string-list "◁▷△▽"))

  ;; Squares.

  ("sq"  . ,(agda-input-to-string-list "■□◼◻◾◽▣▢▤▥▦▧▨▩◧◨◩◪◫◰◱◲◳"))
  ("sqb" . ,(agda-input-to-string-list "■◼◾"))
  ("sqw" . ,(agda-input-to-string-list "□◻◽"))
  ("sq." . ("▣"))
  ("sqo" . ("▢"))

  ;; Rectangles.

  ("re"  . ,(agda-input-to-string-list "▬▭▮▯"))
  ("reb" . ,(agda-input-to-string-list "▬▮"))
  ("rew" . ,(agda-input-to-string-list "▭▯"))

  ;; Parallelograms.

  ("pa"  . ,(agda-input-to-string-list "▰▱"))
  ("pab" . ("▰"))
  ("paw" . ("▱"))

  ;; Diamonds.

  ("di"  . ,(agda-input-to-string-list "◆◇◈"))
  ("dib" . ("◆"))
  ("diw" . ("◇"))
  ("di." . ("◈"))

  ;; Circles.

  ("ci"   . ,(agda-input-to-string-list "●○◎◌◯◍◐◑◒◓◔◕◖◗◠◡◴◵◶◷⚆⚇⚈⚉"))
  ("cib"  . ("●"))
  ("ciw"  . ("○"))
  ("ci."  . ("◎"))
  ("ci.." . ("◌"))
  ("ciO"  . ("◯"))

  ;; Stars.

  ("st"   . ,(agda-input-to-string-list "⋆✦✧✶✴✹ ★☆✪✫✯✰✵✷✸"))
  ("st4"  . ,(agda-input-to-string-list "✦✧"))
  ("st6"  . ("✶"))
  ("st8"  . ("✴"))
  ("st12" . ("✹"))

  ;; Blackboard bold letters.

  ("bn"   . ("ℕ"))
  ("bz"   . ("ℤ"))
  ("bq"   . ("ℚ"))
  ("br"   . ("ℝ"))
  ("bc"   . ("ℂ"))
  ("bp"   . ("ℙ"))
  ("bb"   . ("𝔹"))
  ("bsum" . ("⅀"))

  ;; Blackboard bold numbers.

  ("b0"   . ("𝟘"))
  ("b1"   . ("𝟙"))
  ("b2"   . ("𝟚"))
  ("b3"   . ("𝟛"))
  ("b4"   . ("𝟜"))
  ("b5"   . ("𝟝"))
  ("b6"   . ("𝟞"))
  ("b7"   . ("𝟟"))
  ("b8"   . ("𝟠"))
  ("b9"   . ("𝟡"))

  ;; Parentheses.

  ("(" . ,(agda-input-to-string-list "([{⁅⁽₍〈⎴⟅⟦⟨⟪⦃〈《「『【〔〖〚︵︷︹︻︽︿﹁﹃﹙﹛﹝（［｛｢"))
  (")" . ,(agda-input-to-string-list ")]}⁆⁾₎〉⎵⟆⟧⟩⟫⦄〉》」』】〕〗〛︶︸︺︼︾﹀﹂﹄﹚﹜﹞）］｝｣"))

  ("[[" . ("⟦"))
  ("]]" . ("⟧"))
  ("<"  . ("⟨"))
  (">"  . ("⟩"))
  ("<<" . ("⟪"))
  (">>" . ("⟫"))
  ("{{" . ("⦃"))
  ("}}" . ("⦄"))

  ("(b" . ("⟅"))
  (")b" . ("⟆"))

  ("lbag" . ("⟅"))
  ("rbag" . ("⟆"))

  ;; Primes.

  ("'" . ,(agda-input-to-string-list "′″‴⁗"))
  ("`" . ,(agda-input-to-string-list "‵‶‷"))

  ;; Fractions.

  ("frac" . ,(agda-input-to-string-list "¼½¾⅓⅔⅕⅖⅗⅘⅙⅚⅛⅜⅝⅞⅟"))

  ;; Bullets.

  ("bu"  . ,(agda-input-to-string-list "•◦‣⁌⁍"))
  ("bub" . ("•"))
  ("buw" . ("◦"))
  ("but" . ("‣"))

  ;; Musical symbols.

  ("note" . ,(agda-input-to-string-list "♩♪♫♬"))
  ("b"    . ("♭"))
  ("#"    . ("♯"))

  ;; Other punctuation and symbols.

  ("\\"         . ("\\"))
  ("en"         . ("–"))
  ("em"         . ("—"))
  ("!!"         . ("‼"))
  ("??"         . ("⁇"))
  ("?!"         . ("‽" "⁈"))
  ("!?"         . ("⁉"))
  ("die"        . ,(agda-input-to-string-list "⚀⚁⚂⚃⚄⚅"))
  ("asterisk"   . ,(agda-input-to-string-list "⁎⁑⁂✢✣✤✥✱✲✳✺✻✼✽❃❉❊❋"))
  ("8<"         . ("✂" "✄"))
  ("tie"        . ("⁀"))
  ("undertie"   . ("‿"))
  ("apl"        . ,(agda-input-to-string-list "⌶⌷⌸⌹⌺⌻⌼⌽⌾⌿⍀⍁⍂⍃⍄⍅⍆⍇⍈
                                               ⍉⍊⍋⍌⍍⍎⍏⍐⍑⍒⍓⍔⍕⍖⍗⍘⍙⍚⍛
                                               ⍜⍝⍞⍟⍠⍡⍢⍣⍤⍥⍦⍧⍨⍩⍪⍫⍬⍭⍮
                                               ⍯⍰⍱⍲⍳⍴⍵⍶⍷⍸⍹⍺⎕"))

  ;; Some combining characters.
  ;;
  ;; The following combining characters also have (other)
  ;; translations:
  ;; ̀ ́ ̂ ̃ ̄ ̆ ̇ ̈ ̋ ̌ ̣ ̧ ̱

  ("^--" . ,(agda-input-to-string-list"̅̿"))
  ("_--" . ,(agda-input-to-string-list"̲̳"))
  ("^~"  . ,(agda-input-to-string-list"̃͌"))
  ("_~"  .  (                         "̰"))
  ("^."  . ,(agda-input-to-string-list"̇̈⃛⃜"))
  ("_."  . ,(agda-input-to-string-list"̣̤"))
  ("^l"  . ,(agda-input-to-string-list"⃖⃐⃔"))
  ("^l-" .  (                         "⃖"))
  ("^r"  . ,(agda-input-to-string-list"⃗⃑⃕"))
  ("^r-" .  (                         "⃗"))
  ("^lr" .  (                         "⃡"))
  ("_lr" .  (                         "͍"))
  ("^^"  . ,(agda-input-to-string-list"̂̑͆"))
  ("_^"  . ,(agda-input-to-string-list"̭̯̪"))
  ("^v"  . ,(agda-input-to-string-list"̌̆"))
  ("_v"  . ,(agda-input-to-string-list"̬̮̺"))

  ;; Shorter forms of many greek letters plus ƛ.

  ("Ga"  . ("α"))  ("GA"  . ("Α"))
  ("Gb"  . ("β"))  ("GB"  . ("Β"))
  ("Gg"  . ("γ"))  ("GG"  . ("Γ"))
  ("Gd"  . ("δ"))  ("GD"  . ("Δ"))
  ("Ge"  . ("ε"))  ("GE"  . ("Ε"))
  ("Gz"  . ("ζ"))  ("GZ"  . ("Ζ"))
  ;; \eta \Eta
  ("Gth" . ("θ"))  ("GTH" . ("Θ"))
  ("Gi"  . ("ι"))  ("GI"  . ("Ι"))
  ("Gk"  . ("κ"))  ("GK"  . ("Κ"))
  ("Gl"  . ("λ"))  ("GL"  . ("Λ"))  ("Gl-" . ("ƛ"))
  ("Gm"  . ("μ"))  ("GM"  . ("Μ"))
  ("Gn"  . ("ν"))  ("GN"  . ("Ν"))
  ("Gx"  . ("ξ"))  ("GX"  . ("Ξ"))
  ;; \omicron \Omicron
  ;; \pi \Pi
  ("Gr"  . ("ρ"))  ("GR"  . ("Ρ"))
  ("Gs"  . ("σ"))  ("GS"  . ("Σ"))
  ("Gt"  . ("τ"))  ("GT"  . ("Τ"))
  ("Gu"  . ("υ"))  ("GU"  . ("Υ"))
  ("Gf"  . ("φ"))  ("GF"  . ("Φ"))
  ("Gc"  . ("χ"))  ("GC"  . ("Χ"))
  ("Gp"  . ("ψ"))  ("GP"  . ("Ψ"))
  ("Go"  . ("ω"))  ("GO"  . ("Ω"))

  ;; Mathematical characters

  ("MiA" . ("𝐴"))
  ("MiB" . ("𝐵"))
  ("MiC" . ("𝐶"))
  ("MiD" . ("𝐷"))
  ("MiE" . ("𝐸"))
  ("MiF" . ("𝐹"))
  ("MiG" . ("𝐺"))
  ("MiH" . ("𝐻"))
  ("MiI" . ("𝐼"))
  ("MiJ" . ("𝐽"))
  ("MiK" . ("𝐾"))
  ("MiL" . ("𝐿"))
  ("MiM" . ("𝑀"))
  ("MiN" . ("𝑁"))
  ("MiO" . ("𝑂"))
  ("MiP" . ("𝑃"))
  ("MiQ" . ("𝑄"))
  ("MiR" . ("𝑅"))
  ("MiS" . ("𝑆"))
  ("MiT" . ("𝑇"))
  ("MiU" . ("𝑈"))
  ("MiV" . ("𝑉"))
  ("MiW" . ("𝑊"))
  ("MiX" . ("𝑋"))
  ("MiY" . ("𝑌"))
  ("MiZ" . ("𝑍"))
  ("Mia" . ("𝑎"))
  ("Mib" . ("𝑏"))
  ("Mic" . ("𝑐"))
  ("Mid" . ("𝑑"))
  ("Mie" . ("𝑒"))
  ("Mif" . ("𝑓"))
  ("Mig" . ("𝑔"))
  ("Mii" . ("𝑖"))
  ("Mij" . ("𝑗"))
  ("Mik" . ("𝑘"))
  ("Mil" . ("𝑙"))
  ("Mim" . ("𝑚"))
  ("Min" . ("𝑛"))
  ("Mio" . ("𝑜"))
  ("Mip" . ("𝑝"))
  ("Miq" . ("𝑞"))
  ("Mir" . ("𝑟"))
  ("Mis" . ("𝑠"))
  ("Mit" . ("𝑡"))
  ("Miu" . ("𝑢"))
  ("Miv" . ("𝑣"))
  ("Miw" . ("𝑤"))
  ("Mix" . ("𝑥"))
  ("Miy" . ("𝑦"))
  ("Miz" . ("𝑧"))
  ("MIA" . ("𝑨"))
  ("MIB" . ("𝑩"))
  ("MIC" . ("𝑪"))
  ("MID" . ("𝑫"))
  ("MIE" . ("𝑬"))
  ("MIF" . ("𝑭"))
  ("MIG" . ("𝑮"))
  ("MIH" . ("𝑯"))
  ("MII" . ("𝑰"))
  ("MIJ" . ("𝑱"))
  ("MIK" . ("𝑲"))
  ("MIL" . ("𝑳"))
  ("MIM" . ("𝑴"))
  ("MIN" . ("𝑵"))
  ("MIO" . ("𝑶"))
  ("MIP" . ("𝑷"))
  ("MIQ" . ("𝑸"))
  ("MIR" . ("𝑹"))
  ("MIS" . ("𝑺"))
  ("MIT" . ("𝑻"))
  ("MIU" . ("𝑼"))
  ("MIV" . ("𝑽"))
  ("MIW" . ("𝑾"))
  ("MIX" . ("𝑿"))
  ("MIY" . ("𝒀"))
  ("MIZ" . ("𝒁"))
  ("MIa" . ("𝒂"))
  ("MIb" . ("𝒃"))
  ("MIc" . ("𝒄"))
  ("MId" . ("𝒅"))
  ("MIe" . ("𝒆"))
  ("MIf" . ("𝒇"))
  ("MIg" . ("𝒈"))
  ("MIh" . ("𝒉"))
  ("MIi" . ("𝒊"))
  ("MIj" . ("𝒋"))
  ("MIk" . ("𝒌"))
  ("MIl" . ("𝒍"))
  ("MIm" . ("𝒎"))
  ("MIn" . ("𝒏"))
  ("MIo" . ("𝒐"))
  ("MIp" . ("𝒑"))
  ("MIq" . ("𝒒"))
  ("MIr" . ("𝒓"))
  ("MIs" . ("𝒔"))
  ("MIt" . ("𝒕"))
  ("MIu" . ("𝒖"))
  ("MIv" . ("𝒗"))
  ("MIw" . ("𝒘"))
  ("MIx" . ("𝒙"))
  ("MIy" . ("𝒚"))
  ("MIz" . ("𝒛"))
  ("McA" . ("𝒜"))
  ("McC" . ("𝒞"))
  ("McD" . ("𝒟"))
  ("McG" . ("𝒢"))
  ("McJ" . ("𝒥"))
  ("McK" . ("𝒦"))
  ("McN" . ("𝒩"))
  ("McO" . ("𝒪"))
  ("McP" . ("𝒫"))
  ("McQ" . ("𝒬"))
  ("McS" . ("𝒮"))
  ("McT" . ("𝒯"))
  ("McU" . ("𝒰"))
  ("McV" . ("𝒱"))
  ("McW" . ("𝒲"))
  ("McX" . ("𝒳"))
  ("McY" . ("𝒴"))
  ("McZ" . ("𝒵"))
  ("Mca" . ("𝒶"))
  ("Mcb" . ("𝒷"))
  ("Mcc" . ("𝒸"))
  ("Mcd" . ("𝒹"))
  ("Mcf" . ("𝒻"))
  ("Mch" . ("𝒽"))
  ("Mci" . ("𝒾"))
  ("Mcj" . ("𝒿"))
  ("Mck" . ("𝓀"))
  ("Mcl" . ("𝓁"))
  ("Mcm" . ("𝓂"))
  ("Mcn" . ("𝓃"))
  ("Mcp" . ("𝓅"))
  ("Mcq" . ("𝓆"))
  ("Mcr" . ("𝓇"))
  ("Mcs" . ("𝓈"))
  ("Mct" . ("𝓉"))
  ("Mcu" . ("𝓊"))
  ("Mcv" . ("𝓋"))
  ("Mcw" . ("𝓌"))
  ("Mcx" . ("𝓍"))
  ("Mcy" . ("𝓎"))
  ("Mcz" . ("𝓏"))
  ("MCA" . ("𝓐"))
  ("MCB" . ("𝓑"))
  ("MCC" . ("𝓒"))
  ("MCD" . ("𝓓"))
  ("MCE" . ("𝓔"))
  ("MCF" . ("𝓕"))
  ("MCG" . ("𝓖"))
  ("MCH" . ("𝓗"))
  ("MCI" . ("𝓘"))
  ("MCJ" . ("𝓙"))
  ("MCK" . ("𝓚"))
  ("MCL" . ("𝓛"))
  ("MCM" . ("𝓜"))
  ("MCN" . ("𝓝"))
  ("MCO" . ("𝓞"))
  ("MCP" . ("𝓟"))
  ("MCQ" . ("𝓠"))
  ("MCR" . ("𝓡"))
  ("MCS" . ("𝓢"))
  ("MCT" . ("𝓣"))
  ("MCU" . ("𝓤"))
  ("MCV" . ("𝓥"))
  ("MCW" . ("𝓦"))
  ("MCX" . ("𝓧"))
  ("MCY" . ("𝓨"))
  ("MCZ" . ("𝓩"))
  ("MCa" . ("𝓪"))
  ("MCb" . ("𝓫"))
  ("MCc" . ("𝓬"))
  ("MCd" . ("𝓭"))
  ("MCe" . ("𝓮"))
  ("MCf" . ("𝓯"))
  ("MCg" . ("𝓰"))
  ("MCh" . ("𝓱"))
  ("MCi" . ("𝓲"))
  ("MCj" . ("𝓳"))
  ("MCk" . ("𝓴"))
  ("MCl" . ("𝓵"))
  ("MCm" . ("𝓶"))
  ("MCn" . ("𝓷"))
  ("MCo" . ("𝓸"))
  ("MCp" . ("𝓹"))
  ("MCq" . ("𝓺"))
  ("MCr" . ("𝓻"))
  ("MCs" . ("𝓼"))
  ("MCt" . ("𝓽"))
  ("MCu" . ("𝓾"))
  ("MCv" . ("𝓿"))
  ("MCw" . ("𝔀"))
  ("MCx" . ("𝔁"))
  ("MCy" . ("𝔂"))
  ("MCz" . ("𝔃"))
  ("MfA" . ("𝔄"))
  ("MfB" . ("𝔅"))
  ("MfD" . ("𝔇"))
  ("MfE" . ("𝔈"))
  ("MfF" . ("𝔉"))
  ("MfG" . ("𝔊"))
  ("MfJ" . ("𝔍"))
  ("MfK" . ("𝔎"))
  ("MfL" . ("𝔏"))
  ("MfM" . ("𝔐"))
  ("MfN" . ("𝔑"))
  ("MfO" . ("𝔒"))
  ("MfP" . ("𝔓"))
  ("MfQ" . ("𝔔"))
  ("MfS" . ("𝔖"))
  ("MfT" . ("𝔗"))
  ("MfU" . ("𝔘"))
  ("MfV" . ("𝔙"))
  ("MfW" . ("𝔚"))
  ("MfX" . ("𝔛"))
  ("MfY" . ("𝔜"))
  ("Mfa" . ("𝔞"))
  ("Mfb" . ("𝔟"))
  ("Mfc" . ("𝔠"))
  ("Mfd" . ("𝔡"))
  ("Mfe" . ("𝔢"))
  ("Mff" . ("𝔣"))
  ("Mfg" . ("𝔤"))
  ("Mfh" . ("𝔥"))
  ("Mfi" . ("𝔦"))
  ("Mfj" . ("𝔧"))
  ("Mfk" . ("𝔨"))
  ("Mfl" . ("𝔩"))
  ("Mfm" . ("𝔪"))
  ("Mfn" . ("𝔫"))
  ("Mfo" . ("𝔬"))
  ("Mfp" . ("𝔭"))
  ("Mfq" . ("𝔮"))
  ("Mfr" . ("𝔯"))
  ("Mfs" . ("𝔰"))
  ("Mft" . ("𝔱"))
  ("Mfu" . ("𝔲"))
  ("Mfv" . ("𝔳"))
  ("Mfw" . ("𝔴"))
  ("Mfx" . ("𝔵"))
  ("Mfy" . ("𝔶"))
  ("Mfz" . ("𝔷"))

  ;; (Sub / Super) scripts

  ("_a" . ("ₐ"))
  ("_e" . ("ₑ"))
  ("_h" . ("ₕ"))
  ("_i" . ("ᵢ"))
  ("_j" . ("ⱼ"))
  ("_k" . ("ₖ"))
  ("_l" . ("ₗ"))
  ("_m" . ("ₘ"))
  ("_n" . ("ₙ"))
  ("_o" . ("ₒ"))
  ("_p" . ("ₚ"))
  ("_r" . ("ᵣ"))
  ("_s" . ("ₛ"))
  ("_t" . ("ₜ"))
  ("_u" . ("ᵤ"))
  ("_v" . ("ᵥ"))
  ("_x" . ("ₓ"))

  ("^a" . ("ᵃ"))
  ("^b" . ("ᵇ"))
  ("^c" . ("ᶜ"))
  ("^d" . ("ᵈ"))
  ("^e" . ("ᵉ"))
  ("^f" . ("ᶠ"))
  ("^g" . ("ᵍ"))
  ("^h" . ("ʰ"))
  ("^i" . ("ⁱ"))
  ("^j" . ("ʲ"))
  ("^k" . ("ᵏ"))
  ("^l" . ("ˡ"))
  ("^m" . ("ᵐ"))
  ("^n" . ("ⁿ"))
  ("^o" . ("ᵒ"))
  ("^p" . ("ᵖ"))
  ("^r" . ("ʳ"))
  ("^s" . ("ˢ"))
  ("^t" . ("ᵗ"))
  ("^u" . ("ᵘ"))
  ("^v" . ("ᵛ"))
  ("^w" . ("ʷ"))
  ("^x" . ("ˣ"))
  ("^y" . ("ʸ"))
  ("^z" . ("ᶻ"))

  ("^A" . ("ᴬ"))
  ("^B" . ("ᴮ"))
  ("^D" . ("ᴰ"))
  ("^E" . ("ᴱ"))
  ("^G" . ("ᴳ"))
  ("^H" . ("ᴴ"))
  ("^I" . ("ᴵ"))
  ("^J" . ("ᴶ"))
  ("^K" . ("ᴷ"))
  ("^L" . ("ᴸ"))
  ("^M" . ("ᴹ"))
  ("^N" . ("ᴺ"))
  ("^O" . ("ᴼ"))
  ("^P" . ("ᴾ"))
  ("^R" . ("ᴿ"))
  ("^T" . ("ᵀ"))
  ("^U" . ("ᵁ"))
  ("^V" . ("ⱽ"))
  ("^W" . ("ᵂ"))

  ;; Some ISO8859-1 characters.

  (" "         . (" "))
  ("!"         . ("¡"))
  ("cent"      . ("¢"))
  ("brokenbar" . ("¦"))
  ("degree"    . ("°"))
  ("?"         . ("¿"))
  ("^a_"       . ("ª"))
  ("^o_"       . ("º"))

  ;; Circled, parenthesised etc. numbers and letters.

  ( "(0)" . ,(agda-input-to-string-list " ⓪"))
  ( "(1)" . ,(agda-input-to-string-list "⑴①⒈❶➀➊"))
  ( "(2)" . ,(agda-input-to-string-list "⑵②⒉❷➁➋"))
  ( "(3)" . ,(agda-input-to-string-list "⑶③⒊❸➂➌"))
  ( "(4)" . ,(agda-input-to-string-list "⑷④⒋❹➃➍"))
  ( "(5)" . ,(agda-input-to-string-list "⑸⑤⒌❺➄➎"))
  ( "(6)" . ,(agda-input-to-string-list "⑹⑥⒍❻➅➏"))
  ( "(7)" . ,(agda-input-to-string-list "⑺⑦⒎❼➆➐"))
  ( "(8)" . ,(agda-input-to-string-list "⑻⑧⒏❽➇➑"))
  ( "(9)" . ,(agda-input-to-string-list "⑼⑨⒐❾➈➒"))
  ("(10)" . ,(agda-input-to-string-list "⑽⑩⒑❿➉➓"))
  ("(11)" . ,(agda-input-to-string-list "⑾⑪⒒"))
  ("(12)" . ,(agda-input-to-string-list "⑿⑫⒓"))
  ("(13)" . ,(agda-input-to-string-list "⒀⑬⒔"))
  ("(14)" . ,(agda-input-to-string-list "⒁⑭⒕"))
  ("(15)" . ,(agda-input-to-string-list "⒂⑮⒖"))
  ("(16)" . ,(agda-input-to-string-list "⒃⑯⒗"))
  ("(17)" . ,(agda-input-to-string-list "⒄⑰⒘"))
  ("(18)" . ,(agda-input-to-string-list "⒅⑱⒙"))
  ("(19)" . ,(agda-input-to-string-list "⒆⑲⒚"))
  ("(20)" . ,(agda-input-to-string-list "⒇⑳⒛"))

  ("(a)"  . ,(agda-input-to-string-list "⒜Ⓐⓐ"))
  ("(b)"  . ,(agda-input-to-string-list "⒝Ⓑⓑ"))
  ("(c)"  . ,(agda-input-to-string-list "⒞Ⓒⓒ"))
  ("(d)"  . ,(agda-input-to-string-list "⒟Ⓓⓓ"))
  ("(e)"  . ,(agda-input-to-string-list "⒠Ⓔⓔ"))
  ("(f)"  . ,(agda-input-to-string-list "⒡Ⓕⓕ"))
  ("(g)"  . ,(agda-input-to-string-list "⒢Ⓖⓖ"))
  ("(h)"  . ,(agda-input-to-string-list "⒣Ⓗⓗ"))
  ("(i)"  . ,(agda-input-to-string-list "⒤Ⓘⓘ"))
  ("(j)"  . ,(agda-input-to-string-list "⒥Ⓙⓙ"))
  ("(k)"  . ,(agda-input-to-string-list "⒦Ⓚⓚ"))
  ("(l)"  . ,(agda-input-to-string-list "⒧Ⓛⓛ"))
  ("(m)"  . ,(agda-input-to-string-list "⒨Ⓜⓜ"))
  ("(n)"  . ,(agda-input-to-string-list "⒩Ⓝⓝ"))
  ("(o)"  . ,(agda-input-to-string-list "⒪Ⓞⓞ"))
  ("(p)"  . ,(agda-input-to-string-list "⒫Ⓟⓟ"))
  ("(q)"  . ,(agda-input-to-string-list "⒬Ⓠⓠ"))
  ("(r)"  . ,(agda-input-to-string-list "⒭Ⓡⓡ"))
  ("(s)"  . ,(agda-input-to-string-list "⒮Ⓢⓢ"))
  ("(t)"  . ,(agda-input-to-string-list "⒯Ⓣⓣ"))
  ("(u)"  . ,(agda-input-to-string-list "⒰Ⓤⓤ"))
  ("(v)"  . ,(agda-input-to-string-list "⒱Ⓥⓥ"))
  ("(w)"  . ,(agda-input-to-string-list "⒲Ⓦⓦ"))
  ("(x)"  . ,(agda-input-to-string-list "⒳Ⓧⓧ"))
  ("(y)"  . ,(agda-input-to-string-list "⒴Ⓨⓨ"))
  ("(z)"  . ,(agda-input-to-string-list "⒵Ⓩⓩ"))

  ))
  "A list of translations specific to the Agda input method.
Each element is a pair (KEY-SEQUENCE-STRING . LIST-OF-TRANSLATION-STRINGS).
All the translation strings are possible translations
of the given key sequence; if there is more than one you can choose
between them using the arrow keys.
Note that if you customize this setting you will not
automatically benefit (or suffer) from modifications to its
default value when the library is updated.  If you just want to
add some bindings it is probably a better idea to customize
`agda-input-user-translations'.
These translation pairs are included after those in
`agda-input-user-translations', but before the ones inherited
from other input methods (see `agda-input-inherit').
If you change this setting manually (without using the
customization buffer) you need to call `agda-input-setup' in
order for the change to take effect."
  :group 'agda-input
  :set 'agda-input-incorporate-changed-setting
  :initialize 'custom-initialize-default
  :type '(repeat (cons (string :tag "Key sequence")
                       (repeat :tag "Translations" string))))

(defcustom agda-input-user-translations nil
  "Like `agda-input-translations', but more suitable for user
customizations since by default it is empty.
These translation pairs are included first, before those in
`agda-input-translations' and the ones inherited from other input
methods."
  :group 'agda-input
  :set 'agda-input-incorporate-changed-setting
  :initialize 'custom-initialize-default
  :type '(repeat (cons (string :tag "Key sequence")
                       (repeat :tag "Translations" string))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Inspecting and modifying translation maps

(defun agda-input-get-translations (qp)
  "Return a list containing all translations from the Quail
package QP (except for those corresponding to ASCII).
Each pair in the list has the form (KEY-SEQUENCE . TRANSLATION)."
  (with-temp-buffer
    (activate-input-method qp) ; To make sure that the package is loaded.
    (unless (quail-package qp)
      (error "%s is not a Quail package." qp))
    (let ((decode-map (list 'decode-map)))
      (quail-build-decode-map (list (quail-map)) "" decode-map 0)
      (cdr decode-map))))

(defun agda-input-show-translations (qp)
  "Display all translations used by the Quail package QP (a string).
\(Except for those corresponding to ASCII)."
  (interactive (list (read-input-method-name
                      "Quail input method (default %s): " "Agda")))
  (let ((buf (concat "*" qp " input method translations*")))
    (with-output-to-temp-buffer buf
      (with-current-buffer buf
        (quail-insert-decode-map
         (cons 'decode-map (agda-input-get-translations qp)))))))

(defun agda-input-add-translations (trans)
  "Add the given translations TRANS to the Agda input method.
TRANS is a list of pairs (KEY-SEQUENCE . TRANSLATION). The
translations are appended to the current translations."
  (with-temp-buffer
    (dolist (tr (agda-input-concat-map (eval agda-input-tweak-all) trans))
      (quail-defrule (car tr) (cdr tr) "Agda" t))))

(defun agda-input-inherit-package (qp &optional fun)
  "Let the Agda input method inherit the translations from the
Quail package QP (except for those corresponding to ASCII).
The optional function FUN can be used to modify the translations.
It is given a pair (KEY-SEQUENCE . TRANSLATION) and should return
a list of such pairs."
  (let ((trans (agda-input-get-translations qp)))
    (agda-input-add-translations
     (if fun (agda-input-concat-map fun trans)
       trans))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Setting up the input method

(defun agda-input-setup ()
  "Set up the Agda input method based on the customisable
variables and underlying input methods."

  ;; Create (or reset) the input method.
  (with-temp-buffer
    (quail-define-package "Agda" "UTF-8" "∏" t ; guidance
     "Agda input method.
The purpose of this input method is to edit Agda programs, but
since it is highly customisable it can be made useful for other
tasks as well."
     nil nil nil nil nil nil t ; maximum-shortest
     ))

  (agda-input-add-translations
   (mapcar (lambda (tr) (cons (car tr) (vconcat (cdr tr))))
           (append agda-input-user-translations
                   agda-input-translations)))
  (dolist (def agda-input-inherit)
    (agda-input-inherit-package (car def)
                                (eval (cdr def)))))

(defun agda-input-incorporate-changed-setting (sym val)
  "Update the Agda input method based on the customisable
variables and underlying input methods.
Suitable for use in the :set field of `defcustom'."
  (set-default sym val)
  (agda-input-setup))

;; Set up the input method.

(agda-input-setup)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Administrative details

(provide 'agda-input)
;;; agda-input.el ends here
#+END_SRC

#+RESULTS:
: agda-input

* Snippets
#+BEGIN_SRC emacs-lisp
  ;; Yasnippet provides support for snippets inside Emacs.
  (use-package yasnippet
    :ensure t
    :init (add-to-list 'load-path "~/.emacs.d/plugins/yasnippet")
    :config (yas-global-mode 1)
    :bind (("<C-dead-grave>" . yas-insert-snippet))
    )

  (add-hook 'term-mode-hook (lambda() (yas-minor-mode -1)))
  (add-hook 'term-mode-hook (lambda() (setq yas-dont-activate t)))

  (use-package haskell-snippets :ensure t)
#+END_SRC

They must be loaded with

 * =yas-recompile-all=
 * =yas-reload-all=

** aligned
#+BEGIN_SRC snippet :mkdirp yes :tangle ./snippets/org-mode/aligned
# -*- mode: snippet -*-
# name: aligned
# key: %aligned
# --
\[\begin{aligned}
$1 
&=
&& \mbox{\texit{ (  ) }} \\\\&=
\end{aligned}\]
#+END_SRC

** square
#+BEGIN_SRC snippet :mkdirp yes :tangle ./snippets/org-mode/square
# -*- mode: snippet -*-
# name: square
# key: %square
# --
\[\begin{tikzcd}
$1 \rar{$5} \dar[swap]{$6} & $2 \dar{$7} \\\\
$3 \rar{$8} & $4 
\end{tikzcd}\]
#+END_SRC

** statement
#+BEGIN_SRC snippet :mkdirp yes :tangle ./snippets/org-mode/statement
# -*- mode: snippet -*-
# name: statement
# key: %state
# --
#+begin_statement
$1
#+end_statement
#+END_SRC

** note
#+BEGIN_SRC snippet :mkdirp yes :tangle ./snippets/org-mode/note
# -*- mode: snippet -*-
# name: note
# key: %note
# --
#+begin_note
$1
#+end_note
#+END_SRC

** definition
#+BEGIN_SRC snippet :mkdirp yes :tangle ./snippets/org-mode/definition
# -*- mode: snippet -*-
# name: definition
# key: %definition
# --
#+begin_definition
$1
#+end_definition
#+END_SRC

** lemma
#+BEGIN_SRC snippet :mkdirp yes :tangle ./snippets/org-mode/lemma
# -*- mode: snippet -*-
# name: lemma
# key: %lemma
# --
#+begin_lemma
$1
#+end_lemma
#+END_SRC

** theorem
#+BEGIN_SRC snippet :mkdirp yes :tangle ./snippets/org-mode/theorem
# -*- mode: snippet -*-
# name: theorem
# key: %theorem
# --
#+begin_theorem
$1
#+end_theorem
#+END_SRC

** proof
#+BEGIN_SRC snippet :mkdirp yes :tangle ./snippets/org-mode/proof
# -*- mode: snippet -*-
# name: proof
# key: %proof
# --
#+begin_proof
$1
#+end_proof
#+END_SRC

** prop
#+BEGIN_SRC snippet :mkdirp yes :tangle ./snippets/org-mode/prop
# -*- mode: snippet -*-
# name: proposition
# key: %prop
# --
#+begin_proposition
$1
#+end_proposition
#+END_SRC

* Autocompletion
#+BEGIN_SRC emacs-lisp
  ;; Company provides autocompletion on Emacs.
  ;; This configuration was taken from malb's emacs.d.
  ;; https://github.com/malb/emacs.d/blob/master/malb.org#latex
  (use-package company
    :ensure t
    :config (progn
      (global-company-mode 1)
      (setq company-tooltip-limit 10)
      (setq company-idle-delay 0.5)
      (setq company-require-match nil)
      (setq company-minimum-prefix-length 3)
      (bind-key "<tab>" #'company-complete company-active-map)))

    ;; Completion for mathematics. We create a sane list of backends,
    ;; preventing some of them from firing while writing latex.
    (use-package company-math :ensure t)
    (add-to-list 'company-backends #'company-math-symbols-latex)
    (add-to-list 'company-backends #'company-math-latex-commands)
    (delete #'company-files company-backends)
#+END_SRC

* Customization
#+BEGIN_SRC emacs-lisp
  (message "[init] Customization")
  (message "[init] Window customization")

  ;; Startup dashboard.
  (use-package dashboard
      :ensure t
      :diminish dashboard-mode
      :config
         (setq dashboard-banner-logo-title "Cosmoi Emacs for category theory engineers.")
         (setq dashboard-items '((recents  . 10) (bookmarks . 10)))
         (dashboard-setup-startup-hook)
         (setq dashboard-set-footer nil)
      )

  ;; The package volatile highlights temporarily highlights changes to
  ;; the buffer associated with certain commands that add blocks of text
  ;; at once. An example is that if you paste (yank) a block of text, it
  ;; will be highlighted until you press the next key. This is just a
  ;; small tweak, but gives a nice bit of visual feedback.
  ;; http://pragmaticemacs.com/emacs/volatile-highlights/
  (use-package volatile-highlights
    :ensure t
    :config (volatile-highlights-mode t))

  ;; Beacon signals the position of the cursor when the view changes.  
  (use-package beacon
    :ensure t
    :config (beacon-mode 1))

  ;; Rainbow delimiters colors parentheses with matching and different
  ;; colors. It helps to visually determine the pairing.
  (use-package rainbow-delimiters
    :ensure t
    :config
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
      ; disabled for org (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
      (add-hook 'LaTeX-mode-hook #'rainbow-delimiters-mode))

  ;; The window split should be colored in gray. I do not want it to be
  ;; too prominent.
  ;(set-face-background 'vertical-border "gray")
  ;(set-face-foreground 'vertical-border (face-background 'vertical-border))

  ;; The delimiter character whould be a unicode variant of |.
  (let ((display-table (or standard-display-table (make-display-table))))
    (set-display-table-slot display-table 'vertical-border (make-glyph-code ?┃))
    (setq standard-display-table display-table))
#+END_SRC
